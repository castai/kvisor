// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_blobscache is a generated GoMock package.
package mock_blobscache

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetBlob mocks base method.
func (m *MockClient) GetBlob(ctx context.Context, key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlob", ctx, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlob indicates an expected call of GetBlob.
func (mr *MockClientMockRecorder) GetBlob(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlob", reflect.TypeOf((*MockClient)(nil).GetBlob), ctx, key)
}

// PutBlob mocks base method.
func (m *MockClient) PutBlob(ctx context.Context, key string, blob []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBlob", ctx, key, blob)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutBlob indicates an expected call of PutBlob.
func (mr *MockClientMockRecorder) PutBlob(ctx, key, blob interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBlob", reflect.TypeOf((*MockClient)(nil).PutBlob), ctx, key, blob)
}
