// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_castai is a generated GoMock package.
package mock_castai

import (
	context "context"
	reflect "reflect"

	castai "github.com/castai/sec-agent/castai"
	types "github.com/castai/sec-agent/types"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// SendCISReport mocks base method.
func (m *MockClient) SendCISReport(ctx context.Context, report *castai.CustomReport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCISReport", ctx, report)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCISReport indicates an expected call of SendCISReport.
func (mr *MockClientMockRecorder) SendCISReport(ctx, report interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCISReport", reflect.TypeOf((*MockClient)(nil).SendCISReport), ctx, report)
}

// SendDeltaReport mocks base method.
func (m *MockClient) SendDeltaReport(ctx context.Context, report *castai.Delta) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDeltaReport", ctx, report)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDeltaReport indicates an expected call of SendDeltaReport.
func (mr *MockClientMockRecorder) SendDeltaReport(ctx, report interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDeltaReport", reflect.TypeOf((*MockClient)(nil).SendDeltaReport), ctx, report)
}

// SendLinterChecks mocks base method.
func (m *MockClient) SendLinterChecks(ctx context.Context, checks []types.LinterCheck) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendLinterChecks", ctx, checks)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendLinterChecks indicates an expected call of SendLinterChecks.
func (mr *MockClientMockRecorder) SendLinterChecks(ctx, checks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLinterChecks", reflect.TypeOf((*MockClient)(nil).SendLinterChecks), ctx, checks)
}

// SendLogs mocks base method.
func (m *MockClient) SendLogs(ctx context.Context, req *castai.LogEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendLogs", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendLogs indicates an expected call of SendLogs.
func (mr *MockClientMockRecorder) SendLogs(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLogs", reflect.TypeOf((*MockClient)(nil).SendLogs), ctx, req)
}
