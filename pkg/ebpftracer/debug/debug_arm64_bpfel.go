// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64

package debug

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type debugDebugSocketContext struct {
	SockInfo debugSocketInfo
	Netctx   debugNetTaskContext
}

type debugNetTaskContext struct{ Taskctx debugTaskContext }

type debugProcessBpfMap struct {
	MapId uint32
	Name  [16]uint8
}

type debugSocketInfo struct {
	Tuple  debugTupleT
	Family uint16
	Proto  uint8
	State  uint8
	_      [6]byte
	Ino    uint64
}

type debugTaskContext struct {
	StartTime       uint64
	CgroupId        uint64
	Pid             uint32
	Tid             uint32
	Ppid            uint32
	HostPid         uint32
	HostTid         uint32
	HostPpid        uint32
	NodeHostPid     uint32
	Uid             uint32
	MntId           uint32
	PidId           uint32
	Comm            [16]int8
	LeaderStartTime uint64
	ParentStartTime uint64
}

type debugTupleT struct {
	Saddr  struct{ Raw [16]uint8 }
	Daddr  struct{ Raw [16]uint8 }
	Sport  uint16
	Dport  uint16
	Family uint16
}

// loadDebug returns the embedded CollectionSpec for debug.
func loadDebug() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_DebugBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load debug: %w", err)
	}

	return spec, err
}

// loadDebugObjects loads debug and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*debugObjects
//	*debugPrograms
//	*debugMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadDebugObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadDebug()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// debugSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type debugSpecs struct {
	debugProgramSpecs
	debugMapSpecs
	debugVariableSpecs
}

// debugProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type debugProgramSpecs struct {
	DebugSockmapIterator *ebpf.ProgramSpec `ebpf:"debug_sockmap_iterator"`
	IterMaps             *ebpf.ProgramSpec `ebpf:"iter_maps"`
}

// debugMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type debugMapSpecs struct {
}

// debugVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type debugVariableSpecs struct {
	TRACE_EVENT_FL_TRACEPOINT     *ebpf.VariableSpec `ebpf:"TRACE_EVENT_FL_TRACEPOINT"`
	TRACE_EVENT_FL_TRACEPOINT_BIT *ebpf.VariableSpec `ebpf:"TRACE_EVENT_FL_TRACEPOINT_BIT"`
	DummyBpfMap                   *ebpf.VariableSpec `ebpf:"dummy_bpf_map"`
	DummyDebugSocketContext       *ebpf.VariableSpec `ebpf:"dummy_debug_socket_context"`
	GlobalConfig                  *ebpf.VariableSpec `ebpf:"global_config"`
	IpKeyDummy                    *ebpf.VariableSpec `ebpf:"ip_key_dummy"`
	TargetPid                     *ebpf.VariableSpec `ebpf:"target_pid"`
	TrafficSummaryDummy           *ebpf.VariableSpec `ebpf:"traffic_summary_dummy"`
}

// debugObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadDebugObjects or ebpf.CollectionSpec.LoadAndAssign.
type debugObjects struct {
	debugPrograms
	debugMaps
	debugVariables
}

func (o *debugObjects) Close() error {
	return _DebugClose(
		&o.debugPrograms,
		&o.debugMaps,
	)
}

// debugMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadDebugObjects or ebpf.CollectionSpec.LoadAndAssign.
type debugMaps struct {
}

func (m *debugMaps) Close() error {
	return _DebugClose()
}

// debugVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadDebugObjects or ebpf.CollectionSpec.LoadAndAssign.
type debugVariables struct {
	TRACE_EVENT_FL_TRACEPOINT     *ebpf.Variable `ebpf:"TRACE_EVENT_FL_TRACEPOINT"`
	TRACE_EVENT_FL_TRACEPOINT_BIT *ebpf.Variable `ebpf:"TRACE_EVENT_FL_TRACEPOINT_BIT"`
	DummyBpfMap                   *ebpf.Variable `ebpf:"dummy_bpf_map"`
	DummyDebugSocketContext       *ebpf.Variable `ebpf:"dummy_debug_socket_context"`
	GlobalConfig                  *ebpf.Variable `ebpf:"global_config"`
	IpKeyDummy                    *ebpf.Variable `ebpf:"ip_key_dummy"`
	TargetPid                     *ebpf.Variable `ebpf:"target_pid"`
	TrafficSummaryDummy           *ebpf.Variable `ebpf:"traffic_summary_dummy"`
}

// debugPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadDebugObjects or ebpf.CollectionSpec.LoadAndAssign.
type debugPrograms struct {
	DebugSockmapIterator *ebpf.Program `ebpf:"debug_sockmap_iterator"`
	IterMaps             *ebpf.Program `ebpf:"iter_maps"`
}

func (p *debugPrograms) Close() error {
	return _DebugClose(
		p.DebugSockmapIterator,
		p.IterMaps,
	)
}

func _DebugClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed debug_arm64_bpfel.o
var _DebugBytes []byte
