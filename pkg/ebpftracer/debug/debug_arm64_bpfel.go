// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64

package debug

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type debugDebugSocketContext struct {
	SockInfo debugSocketInfo
	Netctx   debugNetTaskContext
}

type debugNetTaskContext struct{ Taskctx debugTaskContext }

type debugProcessBpfMap struct {
	MapId uint32
	Name  [16]uint8
}

type debugSocketInfo struct {
	Tuple  debugTupleT
	Family uint16
	Proto  uint8
	State  uint8
	_      [6]byte
	Ino    uint64
}

type debugTaskContext struct {
	StartTime       uint64
	CgroupId        uint64
	Pid             uint32
	Tid             uint32
	Ppid            uint32
	HostPid         uint32
	HostTid         uint32
	HostPpid        uint32
	NodeHostPid     uint32
	Uid             uint32
	MntId           uint32
	PidId           uint32
	Comm            [16]int8
	LeaderStartTime uint64
	ParentStartTime uint64
}

type debugTupleT struct {
	Saddr  struct{ Raw [16]uint8 }
	Daddr  struct{ Raw [16]uint8 }
	Sport  uint16
	Dport  uint16
	Family uint16
}

// loadDebug returns the embedded CollectionSpec for debug.
func loadDebug() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_DebugBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load debug: %w", err)
	}

	return spec, err
}

// loadDebugObjects loads debug and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*debugObjects
//	*debugPrograms
//	*debugMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadDebugObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadDebug()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// debugSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type debugSpecs struct {
	debugProgramSpecs
	debugMapSpecs
}

// debugSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type debugProgramSpecs struct {
	DebugSockmapIterator *ebpf.ProgramSpec `ebpf:"debug_sockmap_iterator"`
	IterMaps             *ebpf.ProgramSpec `ebpf:"iter_maps"`
}

// debugMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type debugMapSpecs struct {
	ArgsMap                 *ebpf.MapSpec `ebpf:"args_map"`
	Bufs                    *ebpf.MapSpec `ebpf:"bufs"`
	ConfigMap               *ebpf.MapSpec `ebpf:"config_map"`
	DroppedBinaryInodes     *ebpf.MapSpec `ebpf:"dropped_binary_inodes"`
	EventDataMap            *ebpf.MapSpec `ebpf:"event_data_map"`
	Events                  *ebpf.MapSpec `ebpf:"events"`
	EventsMap               *ebpf.MapSpec `ebpf:"events_map"`
	ExistingSocketsMap      *ebpf.MapSpec `ebpf:"existing_sockets_map"`
	FileModificationMap     *ebpf.MapSpec `ebpf:"file_modification_map"`
	FileWrites              *ebpf.MapSpec `ebpf:"file_writes"`
	IgnoredCgroupsMap       *ebpf.MapSpec `ebpf:"ignored_cgroups_map"`
	IoFilePathCacheMap      *ebpf.MapSpec `ebpf:"io_file_path_cache_map"`
	Logs                    *ebpf.MapSpec `ebpf:"logs"`
	LogsCount               *ebpf.MapSpec `ebpf:"logs_count"`
	Metrics                 *ebpf.MapSpec `ebpf:"metrics"`
	NetHeapSockStateEvent   *ebpf.MapSpec `ebpf:"net_heap_sock_state_event"`
	NetTaskctxMap           *ebpf.MapSpec `ebpf:"net_taskctx_map"`
	NetflowsDataMap         *ebpf.MapSpec `ebpf:"netflows_data_map"`
	NetworkTrafficBufferMap *ebpf.MapSpec `ebpf:"network_traffic_buffer_map"`
	OomInfo                 *ebpf.MapSpec `ebpf:"oom_info"`
	PidOriginalFileFlags    *ebpf.MapSpec `ebpf:"pid_original_file_flags"`
	ProcInfoMap             *ebpf.MapSpec `ebpf:"proc_info_map"`
	ProgArray               *ebpf.MapSpec `ebpf:"prog_array"`
	ProgArrayTp             *ebpf.MapSpec `ebpf:"prog_array_tp"`
	ScratchMap              *ebpf.MapSpec `ebpf:"scratch_map"`
	SignalEvents            *ebpf.MapSpec `ebpf:"signal_events"`
	Signals                 *ebpf.MapSpec `ebpf:"signals"`
	SkbEvents               *ebpf.MapSpec `ebpf:"skb_events"`
	Sys32To64Map            *ebpf.MapSpec `ebpf:"sys_32_to_64_map"`
	SysEnterInitTail        *ebpf.MapSpec `ebpf:"sys_enter_init_tail"`
	SysEnterSubmitTail      *ebpf.MapSpec `ebpf:"sys_enter_submit_tail"`
	SysEnterTails           *ebpf.MapSpec `ebpf:"sys_enter_tails"`
	SysExitInitTail         *ebpf.MapSpec `ebpf:"sys_exit_init_tail"`
	SysExitSubmitTail       *ebpf.MapSpec `ebpf:"sys_exit_submit_tail"`
	SysExitTails            *ebpf.MapSpec `ebpf:"sys_exit_tails"`
	SyscallStatsMap         *ebpf.MapSpec `ebpf:"syscall_stats_map"`
	TaskInfoMap             *ebpf.MapSpec `ebpf:"task_info_map"`
	TtyOpenedFiles          *ebpf.MapSpec `ebpf:"tty_opened_files"`
}

// debugObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadDebugObjects or ebpf.CollectionSpec.LoadAndAssign.
type debugObjects struct {
	debugPrograms
	debugMaps
}

func (o *debugObjects) Close() error {
	return _DebugClose(
		&o.debugPrograms,
		&o.debugMaps,
	)
}

// debugMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadDebugObjects or ebpf.CollectionSpec.LoadAndAssign.
type debugMaps struct {
	ArgsMap                 *ebpf.Map `ebpf:"args_map"`
	Bufs                    *ebpf.Map `ebpf:"bufs"`
	ConfigMap               *ebpf.Map `ebpf:"config_map"`
	DroppedBinaryInodes     *ebpf.Map `ebpf:"dropped_binary_inodes"`
	EventDataMap            *ebpf.Map `ebpf:"event_data_map"`
	Events                  *ebpf.Map `ebpf:"events"`
	EventsMap               *ebpf.Map `ebpf:"events_map"`
	ExistingSocketsMap      *ebpf.Map `ebpf:"existing_sockets_map"`
	FileModificationMap     *ebpf.Map `ebpf:"file_modification_map"`
	FileWrites              *ebpf.Map `ebpf:"file_writes"`
	IgnoredCgroupsMap       *ebpf.Map `ebpf:"ignored_cgroups_map"`
	IoFilePathCacheMap      *ebpf.Map `ebpf:"io_file_path_cache_map"`
	Logs                    *ebpf.Map `ebpf:"logs"`
	LogsCount               *ebpf.Map `ebpf:"logs_count"`
	Metrics                 *ebpf.Map `ebpf:"metrics"`
	NetHeapSockStateEvent   *ebpf.Map `ebpf:"net_heap_sock_state_event"`
	NetTaskctxMap           *ebpf.Map `ebpf:"net_taskctx_map"`
	NetflowsDataMap         *ebpf.Map `ebpf:"netflows_data_map"`
	NetworkTrafficBufferMap *ebpf.Map `ebpf:"network_traffic_buffer_map"`
	OomInfo                 *ebpf.Map `ebpf:"oom_info"`
	PidOriginalFileFlags    *ebpf.Map `ebpf:"pid_original_file_flags"`
	ProcInfoMap             *ebpf.Map `ebpf:"proc_info_map"`
	ProgArray               *ebpf.Map `ebpf:"prog_array"`
	ProgArrayTp             *ebpf.Map `ebpf:"prog_array_tp"`
	ScratchMap              *ebpf.Map `ebpf:"scratch_map"`
	SignalEvents            *ebpf.Map `ebpf:"signal_events"`
	Signals                 *ebpf.Map `ebpf:"signals"`
	SkbEvents               *ebpf.Map `ebpf:"skb_events"`
	Sys32To64Map            *ebpf.Map `ebpf:"sys_32_to_64_map"`
	SysEnterInitTail        *ebpf.Map `ebpf:"sys_enter_init_tail"`
	SysEnterSubmitTail      *ebpf.Map `ebpf:"sys_enter_submit_tail"`
	SysEnterTails           *ebpf.Map `ebpf:"sys_enter_tails"`
	SysExitInitTail         *ebpf.Map `ebpf:"sys_exit_init_tail"`
	SysExitSubmitTail       *ebpf.Map `ebpf:"sys_exit_submit_tail"`
	SysExitTails            *ebpf.Map `ebpf:"sys_exit_tails"`
	SyscallStatsMap         *ebpf.Map `ebpf:"syscall_stats_map"`
	TaskInfoMap             *ebpf.Map `ebpf:"task_info_map"`
	TtyOpenedFiles          *ebpf.Map `ebpf:"tty_opened_files"`
}

func (m *debugMaps) Close() error {
	return _DebugClose(
		m.ArgsMap,
		m.Bufs,
		m.ConfigMap,
		m.DroppedBinaryInodes,
		m.EventDataMap,
		m.Events,
		m.EventsMap,
		m.ExistingSocketsMap,
		m.FileModificationMap,
		m.FileWrites,
		m.IgnoredCgroupsMap,
		m.IoFilePathCacheMap,
		m.Logs,
		m.LogsCount,
		m.Metrics,
		m.NetHeapSockStateEvent,
		m.NetTaskctxMap,
		m.NetflowsDataMap,
		m.NetworkTrafficBufferMap,
		m.OomInfo,
		m.PidOriginalFileFlags,
		m.ProcInfoMap,
		m.ProgArray,
		m.ProgArrayTp,
		m.ScratchMap,
		m.SignalEvents,
		m.Signals,
		m.SkbEvents,
		m.Sys32To64Map,
		m.SysEnterInitTail,
		m.SysEnterSubmitTail,
		m.SysEnterTails,
		m.SysExitInitTail,
		m.SysExitSubmitTail,
		m.SysExitTails,
		m.SyscallStatsMap,
		m.TaskInfoMap,
		m.TtyOpenedFiles,
	)
}

// debugPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadDebugObjects or ebpf.CollectionSpec.LoadAndAssign.
type debugPrograms struct {
	DebugSockmapIterator *ebpf.Program `ebpf:"debug_sockmap_iterator"`
	IterMaps             *ebpf.Program `ebpf:"iter_maps"`
}

func (p *debugPrograms) Close() error {
	return _DebugClose(
		p.DebugSockmapIterator,
		p.IterMaps,
	)
}

func _DebugClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed debug_arm64_bpfel.o
var _DebugBytes []byte
