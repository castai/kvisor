// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64

package ebpftracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type tracerConfigT struct{ SummaryMapIndex int32 }

type tracerEventContextT struct {
	Ts          uint64
	Task        tracerTaskContextT
	Eventid     uint32
	Syscall     int32
	Retval      int64
	ProcessorId uint16
	_           [6]byte
}

type tracerGlobalConfigT struct {
	SelfPid                         uint32
	_                               [4]byte
	PidNsId                         uint64
	FlowSampleSubmitIntervalSeconds uint64
	FlowGrouping                    uint64
	TrackSyscallStats               bool
	ExportMetrics                   bool
	CgroupV1                        bool
	_                               [5]byte
}

type tracerIpKey struct {
	ProcessIdentity struct {
		Pid          uint32
		PidStartTime uint64
		CgroupId     uint64
		Comm         [16]uint8
	}
	Tuple struct {
		Saddr  struct{ Raw [16]uint8 }
		Daddr  struct{ Raw [16]uint8 }
		Sport  uint16
		Dport  uint16
		Family uint16
	}
	Proto uint8
}

type tracerTaskContextT struct {
	StartTime       uint64
	CgroupId        uint64
	Pid             uint32
	Tid             uint32
	Ppid            uint32
	HostPid         uint32
	HostTid         uint32
	HostPpid        uint32
	NodeHostPid     uint32
	Uid             uint32
	MntId           uint32
	PidId           uint32
	Comm            [16]int8
	LeaderStartTime uint64
	ParentStartTime uint64
}

type tracerTrafficSummary struct {
	RxPackets    uint64
	RxBytes      uint64
	TxPackets    uint64
	TxBytes      uint64
	LastPacketTs uint64
}

// loadTracer returns the embedded CollectionSpec for tracer.
func loadTracer() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TracerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load tracer: %w", err)
	}

	return spec, err
}

// loadTracerObjects loads tracer and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*tracerObjects
//	*tracerPrograms
//	*tracerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTracerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTracer()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// tracerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tracerSpecs struct {
	tracerProgramSpecs
	tracerMapSpecs
}

// tracerSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tracerProgramSpecs struct {
	CgroupSkbEgress                 *ebpf.ProgramSpec `ebpf:"cgroup_skb_egress"`
	CgroupSkbIngress                *ebpf.ProgramSpec `ebpf:"cgroup_skb_ingress"`
	CgroupSockCreate                *ebpf.ProgramSpec `ebpf:"cgroup_sock_create"`
	KernelWriteMagicEnter           *ebpf.ProgramSpec `ebpf:"kernel_write_magic_enter"`
	KernelWriteMagicReturn          *ebpf.ProgramSpec `ebpf:"kernel_write_magic_return"`
	OomMarkVictim                   *ebpf.ProgramSpec `ebpf:"oom_mark_victim"`
	SchedProcessExecEventSubmitTail *ebpf.ProgramSpec `ebpf:"sched_process_exec_event_submit_tail"`
	SysDupExitTail                  *ebpf.ProgramSpec `ebpf:"sys_dup_exit_tail"`
	SysEnterInit                    *ebpf.ProgramSpec `ebpf:"sys_enter_init"`
	SysEnterSubmit                  *ebpf.ProgramSpec `ebpf:"sys_enter_submit"`
	SysExitInit                     *ebpf.ProgramSpec `ebpf:"sys_exit_init"`
	SysExitSubmit                   *ebpf.ProgramSpec `ebpf:"sys_exit_submit"`
	SyscallExecve                   *ebpf.ProgramSpec `ebpf:"syscall__execve"`
	SyscallExecveat                 *ebpf.ProgramSpec `ebpf:"syscall__execveat"`
	TraceExecBinprm                 *ebpf.ProgramSpec `ebpf:"trace_exec_binprm"`
	TraceFdInstall                  *ebpf.ProgramSpec `ebpf:"trace_fd_install"`
	TraceFileModified               *ebpf.ProgramSpec `ebpf:"trace_file_modified"`
	TraceFileUpdateTime             *ebpf.ProgramSpec `ebpf:"trace_file_update_time"`
	TraceFilpClose                  *ebpf.ProgramSpec `ebpf:"trace_filp_close"`
	TraceInetSockSetState           *ebpf.ProgramSpec `ebpf:"trace_inet_sock_set_state"`
	TraceLoadElfPhdrs               *ebpf.ProgramSpec `ebpf:"trace_load_elf_phdrs"`
	TraceRetFileModified            *ebpf.ProgramSpec `ebpf:"trace_ret_file_modified"`
	TraceRetFileUpdateTime          *ebpf.ProgramSpec `ebpf:"trace_ret_file_update_time"`
	TraceSecurityBprmCheck          *ebpf.ProgramSpec `ebpf:"trace_security_bprm_check"`
	TraceSecuritySocketConnect      *ebpf.ProgramSpec `ebpf:"trace_security_socket_connect"`
	TraceSysEnter                   *ebpf.ProgramSpec `ebpf:"trace_sys_enter"`
	TraceSysExit                    *ebpf.ProgramSpec `ebpf:"trace_sys_exit"`
	TracepointCgroupCgroupMkdir     *ebpf.ProgramSpec `ebpf:"tracepoint__cgroup__cgroup_mkdir"`
	TracepointCgroupCgroupRmdir     *ebpf.ProgramSpec `ebpf:"tracepoint__cgroup__cgroup_rmdir"`
	TracepointRawSyscallsSysEnter   *ebpf.ProgramSpec `ebpf:"tracepoint__raw_syscalls__sys_enter"`
	TracepointRawSyscallsSysExit    *ebpf.ProgramSpec `ebpf:"tracepoint__raw_syscalls__sys_exit"`
	TracepointSchedSchedProcessExec *ebpf.ProgramSpec `ebpf:"tracepoint__sched__sched_process_exec"`
	TracepointSchedSchedProcessExit *ebpf.ProgramSpec `ebpf:"tracepoint__sched__sched_process_exit"`
	TracepointSchedSchedProcessFork *ebpf.ProgramSpec `ebpf:"tracepoint__sched__sched_process_fork"`
	TracepointSchedSchedProcessFree *ebpf.ProgramSpec `ebpf:"tracepoint__sched__sched_process_free"`
	TracepointSchedSchedSwitch      *ebpf.ProgramSpec `ebpf:"tracepoint__sched__sched_switch"`
	TtyOpen                         *ebpf.ProgramSpec `ebpf:"tty_open"`
	TtyWrite                        *ebpf.ProgramSpec `ebpf:"tty_write"`
	VfsWriteMagicEnter              *ebpf.ProgramSpec `ebpf:"vfs_write_magic_enter"`
	VfsWriteMagicReturn             *ebpf.ProgramSpec `ebpf:"vfs_write_magic_return"`
	VfsWritevMagicEnter             *ebpf.ProgramSpec `ebpf:"vfs_writev_magic_enter"`
	VfsWritevMagicReturn            *ebpf.ProgramSpec `ebpf:"vfs_writev_magic_return"`
}

// tracerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tracerMapSpecs struct {
	ArgsMap                 *ebpf.MapSpec `ebpf:"args_map"`
	Bufs                    *ebpf.MapSpec `ebpf:"bufs"`
	ConfigMap               *ebpf.MapSpec `ebpf:"config_map"`
	DroppedBinaryInodes     *ebpf.MapSpec `ebpf:"dropped_binary_inodes"`
	EventDataMap            *ebpf.MapSpec `ebpf:"event_data_map"`
	Events                  *ebpf.MapSpec `ebpf:"events"`
	EventsMap               *ebpf.MapSpec `ebpf:"events_map"`
	FileModificationMap     *ebpf.MapSpec `ebpf:"file_modification_map"`
	FileWrites              *ebpf.MapSpec `ebpf:"file_writes"`
	IgnoredCgroupsMap       *ebpf.MapSpec `ebpf:"ignored_cgroups_map"`
	IoFilePathCacheMap      *ebpf.MapSpec `ebpf:"io_file_path_cache_map"`
	Logs                    *ebpf.MapSpec `ebpf:"logs"`
	LogsCount               *ebpf.MapSpec `ebpf:"logs_count"`
	Metrics                 *ebpf.MapSpec `ebpf:"metrics"`
	NetHeapSockStateEvent   *ebpf.MapSpec `ebpf:"net_heap_sock_state_event"`
	NetTaskctxMap           *ebpf.MapSpec `ebpf:"net_taskctx_map"`
	NetflowsDataMap         *ebpf.MapSpec `ebpf:"netflows_data_map"`
	NetworkTrafficBufferMap *ebpf.MapSpec `ebpf:"network_traffic_buffer_map"`
	OomInfo                 *ebpf.MapSpec `ebpf:"oom_info"`
	PidOriginalFileFlags    *ebpf.MapSpec `ebpf:"pid_original_file_flags"`
	ProcInfoMap             *ebpf.MapSpec `ebpf:"proc_info_map"`
	ProgArray               *ebpf.MapSpec `ebpf:"prog_array"`
	ProgArrayTp             *ebpf.MapSpec `ebpf:"prog_array_tp"`
	ScratchMap              *ebpf.MapSpec `ebpf:"scratch_map"`
	SignalEvents            *ebpf.MapSpec `ebpf:"signal_events"`
	Signals                 *ebpf.MapSpec `ebpf:"signals"`
	Sys32To64Map            *ebpf.MapSpec `ebpf:"sys_32_to_64_map"`
	SysEnterInitTail        *ebpf.MapSpec `ebpf:"sys_enter_init_tail"`
	SysEnterSubmitTail      *ebpf.MapSpec `ebpf:"sys_enter_submit_tail"`
	SysEnterTails           *ebpf.MapSpec `ebpf:"sys_enter_tails"`
	SysExitInitTail         *ebpf.MapSpec `ebpf:"sys_exit_init_tail"`
	SysExitSubmitTail       *ebpf.MapSpec `ebpf:"sys_exit_submit_tail"`
	SysExitTails            *ebpf.MapSpec `ebpf:"sys_exit_tails"`
	SyscallStatsMap         *ebpf.MapSpec `ebpf:"syscall_stats_map"`
	TaskInfoMap             *ebpf.MapSpec `ebpf:"task_info_map"`
	TtyOpenedFiles          *ebpf.MapSpec `ebpf:"tty_opened_files"`
}

// tracerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type tracerObjects struct {
	tracerPrograms
	tracerMaps
}

func (o *tracerObjects) Close() error {
	return _TracerClose(
		&o.tracerPrograms,
		&o.tracerMaps,
	)
}

// tracerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type tracerMaps struct {
	ArgsMap                 *ebpf.Map `ebpf:"args_map"`
	Bufs                    *ebpf.Map `ebpf:"bufs"`
	ConfigMap               *ebpf.Map `ebpf:"config_map"`
	DroppedBinaryInodes     *ebpf.Map `ebpf:"dropped_binary_inodes"`
	EventDataMap            *ebpf.Map `ebpf:"event_data_map"`
	Events                  *ebpf.Map `ebpf:"events"`
	EventsMap               *ebpf.Map `ebpf:"events_map"`
	FileModificationMap     *ebpf.Map `ebpf:"file_modification_map"`
	FileWrites              *ebpf.Map `ebpf:"file_writes"`
	IgnoredCgroupsMap       *ebpf.Map `ebpf:"ignored_cgroups_map"`
	IoFilePathCacheMap      *ebpf.Map `ebpf:"io_file_path_cache_map"`
	Logs                    *ebpf.Map `ebpf:"logs"`
	LogsCount               *ebpf.Map `ebpf:"logs_count"`
	Metrics                 *ebpf.Map `ebpf:"metrics"`
	NetHeapSockStateEvent   *ebpf.Map `ebpf:"net_heap_sock_state_event"`
	NetTaskctxMap           *ebpf.Map `ebpf:"net_taskctx_map"`
	NetflowsDataMap         *ebpf.Map `ebpf:"netflows_data_map"`
	NetworkTrafficBufferMap *ebpf.Map `ebpf:"network_traffic_buffer_map"`
	OomInfo                 *ebpf.Map `ebpf:"oom_info"`
	PidOriginalFileFlags    *ebpf.Map `ebpf:"pid_original_file_flags"`
	ProcInfoMap             *ebpf.Map `ebpf:"proc_info_map"`
	ProgArray               *ebpf.Map `ebpf:"prog_array"`
	ProgArrayTp             *ebpf.Map `ebpf:"prog_array_tp"`
	ScratchMap              *ebpf.Map `ebpf:"scratch_map"`
	SignalEvents            *ebpf.Map `ebpf:"signal_events"`
	Signals                 *ebpf.Map `ebpf:"signals"`
	Sys32To64Map            *ebpf.Map `ebpf:"sys_32_to_64_map"`
	SysEnterInitTail        *ebpf.Map `ebpf:"sys_enter_init_tail"`
	SysEnterSubmitTail      *ebpf.Map `ebpf:"sys_enter_submit_tail"`
	SysEnterTails           *ebpf.Map `ebpf:"sys_enter_tails"`
	SysExitInitTail         *ebpf.Map `ebpf:"sys_exit_init_tail"`
	SysExitSubmitTail       *ebpf.Map `ebpf:"sys_exit_submit_tail"`
	SysExitTails            *ebpf.Map `ebpf:"sys_exit_tails"`
	SyscallStatsMap         *ebpf.Map `ebpf:"syscall_stats_map"`
	TaskInfoMap             *ebpf.Map `ebpf:"task_info_map"`
	TtyOpenedFiles          *ebpf.Map `ebpf:"tty_opened_files"`
}

func (m *tracerMaps) Close() error {
	return _TracerClose(
		m.ArgsMap,
		m.Bufs,
		m.ConfigMap,
		m.DroppedBinaryInodes,
		m.EventDataMap,
		m.Events,
		m.EventsMap,
		m.FileModificationMap,
		m.FileWrites,
		m.IgnoredCgroupsMap,
		m.IoFilePathCacheMap,
		m.Logs,
		m.LogsCount,
		m.Metrics,
		m.NetHeapSockStateEvent,
		m.NetTaskctxMap,
		m.NetflowsDataMap,
		m.NetworkTrafficBufferMap,
		m.OomInfo,
		m.PidOriginalFileFlags,
		m.ProcInfoMap,
		m.ProgArray,
		m.ProgArrayTp,
		m.ScratchMap,
		m.SignalEvents,
		m.Signals,
		m.Sys32To64Map,
		m.SysEnterInitTail,
		m.SysEnterSubmitTail,
		m.SysEnterTails,
		m.SysExitInitTail,
		m.SysExitSubmitTail,
		m.SysExitTails,
		m.SyscallStatsMap,
		m.TaskInfoMap,
		m.TtyOpenedFiles,
	)
}

// tracerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type tracerPrograms struct {
	CgroupSkbEgress                 *ebpf.Program `ebpf:"cgroup_skb_egress"`
	CgroupSkbIngress                *ebpf.Program `ebpf:"cgroup_skb_ingress"`
	CgroupSockCreate                *ebpf.Program `ebpf:"cgroup_sock_create"`
	KernelWriteMagicEnter           *ebpf.Program `ebpf:"kernel_write_magic_enter"`
	KernelWriteMagicReturn          *ebpf.Program `ebpf:"kernel_write_magic_return"`
	OomMarkVictim                   *ebpf.Program `ebpf:"oom_mark_victim"`
	SchedProcessExecEventSubmitTail *ebpf.Program `ebpf:"sched_process_exec_event_submit_tail"`
	SysDupExitTail                  *ebpf.Program `ebpf:"sys_dup_exit_tail"`
	SysEnterInit                    *ebpf.Program `ebpf:"sys_enter_init"`
	SysEnterSubmit                  *ebpf.Program `ebpf:"sys_enter_submit"`
	SysExitInit                     *ebpf.Program `ebpf:"sys_exit_init"`
	SysExitSubmit                   *ebpf.Program `ebpf:"sys_exit_submit"`
	SyscallExecve                   *ebpf.Program `ebpf:"syscall__execve"`
	SyscallExecveat                 *ebpf.Program `ebpf:"syscall__execveat"`
	TraceExecBinprm                 *ebpf.Program `ebpf:"trace_exec_binprm"`
	TraceFdInstall                  *ebpf.Program `ebpf:"trace_fd_install"`
	TraceFileModified               *ebpf.Program `ebpf:"trace_file_modified"`
	TraceFileUpdateTime             *ebpf.Program `ebpf:"trace_file_update_time"`
	TraceFilpClose                  *ebpf.Program `ebpf:"trace_filp_close"`
	TraceInetSockSetState           *ebpf.Program `ebpf:"trace_inet_sock_set_state"`
	TraceLoadElfPhdrs               *ebpf.Program `ebpf:"trace_load_elf_phdrs"`
	TraceRetFileModified            *ebpf.Program `ebpf:"trace_ret_file_modified"`
	TraceRetFileUpdateTime          *ebpf.Program `ebpf:"trace_ret_file_update_time"`
	TraceSecurityBprmCheck          *ebpf.Program `ebpf:"trace_security_bprm_check"`
	TraceSecuritySocketConnect      *ebpf.Program `ebpf:"trace_security_socket_connect"`
	TraceSysEnter                   *ebpf.Program `ebpf:"trace_sys_enter"`
	TraceSysExit                    *ebpf.Program `ebpf:"trace_sys_exit"`
	TracepointCgroupCgroupMkdir     *ebpf.Program `ebpf:"tracepoint__cgroup__cgroup_mkdir"`
	TracepointCgroupCgroupRmdir     *ebpf.Program `ebpf:"tracepoint__cgroup__cgroup_rmdir"`
	TracepointRawSyscallsSysEnter   *ebpf.Program `ebpf:"tracepoint__raw_syscalls__sys_enter"`
	TracepointRawSyscallsSysExit    *ebpf.Program `ebpf:"tracepoint__raw_syscalls__sys_exit"`
	TracepointSchedSchedProcessExec *ebpf.Program `ebpf:"tracepoint__sched__sched_process_exec"`
	TracepointSchedSchedProcessExit *ebpf.Program `ebpf:"tracepoint__sched__sched_process_exit"`
	TracepointSchedSchedProcessFork *ebpf.Program `ebpf:"tracepoint__sched__sched_process_fork"`
	TracepointSchedSchedProcessFree *ebpf.Program `ebpf:"tracepoint__sched__sched_process_free"`
	TracepointSchedSchedSwitch      *ebpf.Program `ebpf:"tracepoint__sched__sched_switch"`
	TtyOpen                         *ebpf.Program `ebpf:"tty_open"`
	TtyWrite                        *ebpf.Program `ebpf:"tty_write"`
	VfsWriteMagicEnter              *ebpf.Program `ebpf:"vfs_write_magic_enter"`
	VfsWriteMagicReturn             *ebpf.Program `ebpf:"vfs_write_magic_return"`
	VfsWritevMagicEnter             *ebpf.Program `ebpf:"vfs_writev_magic_enter"`
	VfsWritevMagicReturn            *ebpf.Program `ebpf:"vfs_writev_magic_return"`
}

func (p *tracerPrograms) Close() error {
	return _TracerClose(
		p.CgroupSkbEgress,
		p.CgroupSkbIngress,
		p.CgroupSockCreate,
		p.KernelWriteMagicEnter,
		p.KernelWriteMagicReturn,
		p.OomMarkVictim,
		p.SchedProcessExecEventSubmitTail,
		p.SysDupExitTail,
		p.SysEnterInit,
		p.SysEnterSubmit,
		p.SysExitInit,
		p.SysExitSubmit,
		p.SyscallExecve,
		p.SyscallExecveat,
		p.TraceExecBinprm,
		p.TraceFdInstall,
		p.TraceFileModified,
		p.TraceFileUpdateTime,
		p.TraceFilpClose,
		p.TraceInetSockSetState,
		p.TraceLoadElfPhdrs,
		p.TraceRetFileModified,
		p.TraceRetFileUpdateTime,
		p.TraceSecurityBprmCheck,
		p.TraceSecuritySocketConnect,
		p.TraceSysEnter,
		p.TraceSysExit,
		p.TracepointCgroupCgroupMkdir,
		p.TracepointCgroupCgroupRmdir,
		p.TracepointRawSyscallsSysEnter,
		p.TracepointRawSyscallsSysExit,
		p.TracepointSchedSchedProcessExec,
		p.TracepointSchedSchedProcessExit,
		p.TracepointSchedSchedProcessFork,
		p.TracepointSchedSchedProcessFree,
		p.TracepointSchedSchedSwitch,
		p.TtyOpen,
		p.TtyWrite,
		p.VfsWriteMagicEnter,
		p.VfsWriteMagicReturn,
		p.VfsWritevMagicEnter,
		p.VfsWritevMagicReturn,
	)
}

func _TracerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tracer_arm64_bpfel.o
var _TracerBytes []byte
