// Code generated by eventcontextcodegen; DO NOT EDIT.
//go:build 386 || amd64

package decoder

import (
	"encoding/binary"
	"fmt"

	"github.com/castai/kvisor/pkg/ebpftracer/events"
	"github.com/castai/kvisor/pkg/ebpftracer/types"
)

// DecodeContext translates data from the decoder buffer, starting from the decoder cursor, to bufferdecoder.eventContext struct.
func (decoder *Decoder) DecodeContext(ctx *types.EventContext) error {
	offset := decoder.cursor

	if len(decoder.buffer[offset:]) < EventContextSize() {
		return fmt.Errorf("context buffer size [%d] smaller than %d", len(decoder.buffer[offset:]), EventContextSize())
	}

	ctx.Ts = binary.LittleEndian.Uint64(decoder.buffer[offset+0 : offset+8])
	ctx.StartTime = binary.LittleEndian.Uint64(decoder.buffer[offset+8 : offset+16])
	ctx.CgroupID = binary.LittleEndian.Uint64(decoder.buffer[offset+16 : offset+24])
	ctx.Pid = binary.LittleEndian.Uint32(decoder.buffer[offset+24 : offset+28])
	ctx.Tid = binary.LittleEndian.Uint32(decoder.buffer[offset+28 : offset+32])
	ctx.Ppid = binary.LittleEndian.Uint32(decoder.buffer[offset+32 : offset+36])
	ctx.HostPid = binary.LittleEndian.Uint32(decoder.buffer[offset+36 : offset+40])
	ctx.HostTid = binary.LittleEndian.Uint32(decoder.buffer[offset+40 : offset+44])
	ctx.HostPpid = binary.LittleEndian.Uint32(decoder.buffer[offset+44 : offset+48])
	ctx.NodeHostPid = binary.LittleEndian.Uint32(decoder.buffer[offset+48 : offset+52])
	ctx.Uid = binary.LittleEndian.Uint32(decoder.buffer[offset+52 : offset+56])
	ctx.MntID = binary.LittleEndian.Uint32(decoder.buffer[offset+56 : offset+60])
	ctx.PidID = binary.LittleEndian.Uint32(decoder.buffer[offset+60 : offset+64])
	_ = copy(ctx.Comm[:], decoder.buffer[64:80])
	ctx.LeaderStartTime = binary.LittleEndian.Uint64(decoder.buffer[offset+80 : offset+88])
	ctx.ParentStartTime = binary.LittleEndian.Uint64(decoder.buffer[offset+88 : offset+96])
	ctx.EventID = events.ID(binary.LittleEndian.Uint32(decoder.buffer[offset+96 : offset+100]))
	ctx.Syscall = int32(binary.LittleEndian.Uint32(decoder.buffer[offset+100 : offset+104]))
	ctx.Retval = int64(binary.LittleEndian.Uint64(decoder.buffer[offset+104 : offset+112]))
	ctx.ProcessorId = binary.LittleEndian.Uint16(decoder.buffer[offset+112 : offset+114])

	decoder.cursor += EventContextSize()
	return nil
}


func EventContextSize() int {
	return 120
}
