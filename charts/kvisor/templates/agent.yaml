{{- if .Values.agent.enabled }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "kvisor.agent.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "kvisor.agent.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "kvisor.agent.selectorLabels" . | nindent 6 }}
  {{- with .Values.agent.updateStrategy }}
  updateStrategy:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
      {{- if .Values.agent.prometheusScrape.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.agent.metricsHTTPListenPort }}"
      {{- end }}
      {{- if .Values.pyroscope.enabled }}
        phlare.grafana.com/scrape: "true"
        phlare.grafana.com/port: "{{ .Values.agent.metricsHTTPListenPort }}"
        profiles.grafana.com/memory.scrape: "true"
        profiles.grafana.com/memory.port: "{{ .Values.agent.metricsHTTPListenPort }}"
        profiles.grafana.com/cpu.scrape: "true"
        profiles.grafana.com/cpu.port: "{{ .Values.agent.metricsHTTPListenPort }}"
        profiles.grafana.com/goroutine.scrape: "true"
        profiles.grafana.com/goroutine.port: "{{ .Values.agent.metricsHTTPListenPort }}"
      {{- end }}
        container.apparmor.security.beta.kubernetes.io/kvisor: unconfined
      {{- with .Values.agent.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "kvisor.agent.selectorLabels" . | nindent 8 }}
        {{- include "kvisor.commonLabels" . | nindent 8 }}
        {{- with .Values.agent.podLabels }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "kvisor.agent.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.agent.automountServiceAccountToken }}
      hostPID: true
      {{- if .Values.agent.sustainability.enabled }}
      # hostNetwork required for Kepler to access hardware sensors (RAPL, MSRs)
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      {{- end }}
      securityContext:
        {{- toYaml .Values.agent.securityContext | nindent 8 }}
      priorityClassName: {{ .Values.agent.priorityClass }}
      containers:
        - name: kvisor
          securityContext:
            {{- toYaml .Values.agent.containerSecurityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}-agent:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            {{- toYaml .Values.agent.resources | nindent 12 }}
          command:
            - "/usr/local/bin/kvisor-agent"
          args:
            - "run"
            - "--metrics-http-listen-port={{.Values.agent.metricsHTTPListenPort}}"
          {{- if eq .Values.mockServer.enabled true }}
            - "--castai-server-insecure=true"
          {{- end }}
          {{- if .Values.clickhouse.enabled }}
            - "--clickhouse-addr={{ include "kvisor.clickhouse.fullname" . }}.{{ .Release.Namespace}}:9000"
            - "--clickhouse-database={{.Values.clickhouse.auth.database}}"
            - "--clickhouse-username={{.Values.clickhouse.auth.username}}"
          {{- end }}
            - "--kube-api-service-addr={{ include "kvisor.controller.fullname" .}}.{{.Release.Namespace}}:{{ .Values.controller.kubeAPIListenPort }}"
          {{- if .Values.agent.sustainability.enabled }}
            - "--sustainability-enabled={{ .Values.agent.sustainability.enabled }}"
            - "--sustainability-kepler-endpoint={{ .Values.agent.sustainability.keplerEndpoint }}"
            {{- if .Values.agent.sustainability.scrapeInterval }}
            - "--sustainability-scrape-interval={{ .Values.agent.sustainability.scrapeInterval }}"
            {{- end }}
          {{- end }}
          {{- range $key, $value := .Values.agent.extraArgs }}
            - "--{{ $key }}={{ $value }}"
          {{- end }}
          envFrom:
          {{- with .Values.agent.envFrom }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- if .Values.castai.enabled }}
          {{- include "kvisor.apiKeyEnvFrom" (set (deepCopy .) "envFrom" .Values.agent.envFrom) | nindent 12 }}
          {{- end }}
          {{- if.Values.clickhouse.enabled }}
            - secretRef:
                name:  {{ include "kvisor.clickhouse.fullname" . }}
          {{- end }}
          env:
            {{- include "GOMEMLIMITEnv" .Values.agent.resources.limits.memory | nindent 12 }}
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CASTAI_API_GRPC_ADDR
              value: {{ if .Values.mockServer.enabled -}}
                       {{ (printf "%s:8443" (include "kvisor.castaiMockServer.service" .)) | quote }}
                     {{- else -}}
                       {{ .Values.castai.grpcAddr | quote }}
                     {{- end }}
          {{- include "kvisor.clusterIDEnv" (set (deepCopy .) "envFrom" .Values.agent.envFrom) | nindent 12 }}
          {{- if .Values.agent.debug.ebpf }}
            - name: KVISOR_EBPF_DEBUG
              value: "1"
          {{- end }}
          {{- range $k, $v := .Values.agent.additionalEnv }}
            - name: {{ $k }}
              value: "{{ $v }}"
          {{- end }}
          ports:
            - containerPort: {{.Values.agent.metricsHTTPListenPort}}
              name: metrics
              protocol: TCP
          livenessProbe:
            httpGet:
              port: metrics
              path: /healthz
            periodSeconds: 5
          readinessProbe:
            httpGet:
              port: metrics
              path: /healthz
            periodSeconds: 5
          startupProbe:
            httpGet:
              port: metrics
              path: /healthz
            failureThreshold: 12
            periodSeconds: 10
          volumeMounts:
            - name: cgroups
              mountPath: /cgroups
              readOnly: true
            - mountPath: /cgroup2-manual-mount
              name: cgroup-mountdir
            - name: etc-os-release
              mountPath: /etc/os-release-host
              readOnly: true
            - name: debugfs
              mountPath: /sys/kernel/debug
            - name: containerd-sock
              mountPath: /run/containerd/containerd.sock
              readOnly: true
        {{- if .Values.agent.sustainability.enabled }}
        # Kepler (Kubernetes-based Efficient Power Level Exporter) sidecar container
        # Documentation: https://sustainable-computing.io/
        - name: kepler
          image: "quay.io/sustainable_computing_io/kepler:latest"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            # Kepler requires privileged mode for:
            # - Intel RAPL (Running Average Power Limit) sensor access via /sys/class/powercap/intel-rapl
            # - eBPF program loading and attachment to kernel tracepoints
            # - Access to MSRs (Model Specific Registers) for CPU power monitoring
            # - Hardware performance counters (perf events)
            privileged: true
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: true
            capabilities:
              add:
                - SYS_ADMIN  # Required for eBPF programs and tracepoint attachment
                - SYS_RESOURCE  # For resource limit modifications
                - NET_ADMIN  # For network-related eBPF programs
                - PERFMON  # For hardware performance counter access (Linux 5.8+)
                - BPF  # For eBPF operations (Linux 5.8+)
              drop:
                - ALL
          resources:
            requests:
              cpu: 100m
              memory: 200Mi
          command:
            - /usr/bin/kepler
          env:
            # Node identification
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            # Official Kepler environment variables based on sustainable-computing.io docs
            - name: KEPLER_LOG_LEVEL
              value: "1"  # Numeric levels: 0=debug, 1=info, 2=warn, 3=error
            - name: METRIC_PATH
              value: "/metrics"  # Prometheus metrics endpoint path
            - name: BIND_ADDRESS
              value: "0.0.0.0:8888"  # Metrics server bind address
            
            # Metrics collection configuration
            - name: COUNTER_METRICS
              value: "*"  # Enable all counter metrics
            - name: BPF_METRICS
              value: "*"  # Enable all eBPF metrics
            - name: PERF_METRICS
              value: "*"  # Enable all performance counter metrics
            - name: GPU_METRICS
              value: ""  # Empty = disabled, "*" = all GPU metrics
            
            # Feature flags (official Kepler configuration)
            - name: ENABLE_EBPF_CGROUPID
              value: "true"  # Use eBPF for cgroup-based resource tracking
            - name: EXPOSE_HW_COUNTER_METRICS
              value: "true"  # Expose hardware performance counter metrics
            - name: ENABLE_PROCESS_METRICS
              value: "false"  # Process-level metrics (high overhead)
            
            # Model server configuration (for environments without hardware sensors)
            - name: MODEL_SERVER_ENABLE
              value: "{{ .Values.agent.sustainability.modelServer.enabled | default "false" }}"  # External ML model for power estimation
            {{- if .Values.agent.sustainability.modelServer.enabled }}
            - name: MODEL_SERVER_ENDPOINT
              value: "{{ .Values.agent.sustainability.modelServer.endpoint }}"
            {{- end }}
            
            # Development/testing configuration
            {{- if .Values.agent.sustainability.fakeCpuMeter }}
            - name: KEPLER_ENABLE_FAKE_CPU_METER
              value: "true"  # Enable fake CPU meter for testing without RAPL
            {{- end }}
          ports:
            - containerPort: 8888
              name: kepler-metrics
              protocol: TCP
          # Health checks based on official Kepler Helm chart
          livenessProbe:
            httpGet:
              path: /healthz
              port: kepler-metrics
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /healthz
              port: kepler-metrics
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /healthz
              port: kepler-metrics
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 12
          volumeMounts:
            # Kernel modules for eBPF
            - name: lib-modules
              mountPath: /lib/modules
              readOnly: true
            # System information and hardware sensors
            - name: sys
              mountPath: /sys
              readOnly: false  # Write access needed for eBPF maps and tracepoints
            # Process and container information
            - name: proc
              mountPath: /proc
              readOnly: true
            # Optional: Kernel headers for eBPF compilation
            {{- if .Values.agent.sustainability.mountUsrSrc }}
            - name: usr-src
              mountPath: /usr/src
              readOnly: true
            {{- end }}
        {{- end }}
      dnsPolicy: {{.Values.agent.dnsPolicy}}
      {{- with .Values.agent.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.agent.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.agent.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      # TODO: Since we run with hostPID these volumes could be removed and accessed via `/proc/1/root` prefix.
      volumes:
        - name: etc-os-release
          hostPath:
            path: /etc/os-release
        - name: debugfs
          hostPath:
            path: /sys/kernel/debug
        - name: cgroups
          hostPath:
            path: /sys/fs/cgroup
        - name: cgroup-mountdir
          emptyDir: {}
        - name: containerd-sock
          hostPath:
            path: /run/containerd/containerd.sock
            type: Socket
        {{- if .Values.agent.sustainability.enabled }}
        # Kepler
        - name: lib-modules
          hostPath:
            path: /lib/modules
            # Kernel modules for eBPF CO-RE
            type: DirectoryOrCreate
        - name: sys
          hostPath:
            path: /sys
            # Hardware sensors (/sys/class/powercap) and eBPF
            type: Directory
        - name: proc
          hostPath:
            path: /proc
            # Process information for container attribution
            type: Directory
        - name: usr-src
          hostPath:
            path: /sys
        {{- end }}
{{- end }}
---
{{- if .Values.agent.serviceAccount.create -}}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "kvisor.agent.serviceAccountName" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "kvisor.labels" . | nindent 4}}
  {{- with .Values.agent.serviceAccount.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ include "kvisor.fullname" . }}
  labels:
    {{- include "kvisor.labels" . | nindent 4}}
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "apps"
    resources:
      - deployments
      - replicasets
      - daemonsets
      - statefulsets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "batch"
    resources:
      - jobs
      - cronjobs
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ include "kvisor.fullname" . }}
  labels:
    {{- include "kvisor.labels" . | nindent 4}}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ include "kvisor.fullname" . }}
subjects:
  - kind: ServiceAccount
    name: {{ include "kvisor.agent.serviceAccountName" . }}
    namespace: {{.Release.Namespace}}
---
{{ if not (empty .Values.agent.priorityClass) }}
apiVersion: v1
kind: ResourceQuota
metadata:
  name: {{ include "kvisor.agent.fullname" . }}-critical-pods
  namespace: {{ .Release.Namespace }}
spec:
  scopeSelector:
    matchExpressions:
      - operator: In
        scopeName: PriorityClass
        values:
          - {{ .Values.agent.priorityClass }}
{{- end }}
{{- end }}
{{- if .Values.agent.sustainability.enabled }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "kvisor.agent.fullname" . }}-kepler
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "kvisor.agent.labels" . | nindent 4 }}
    app.kubernetes.io/component: kepler
spec:
  type: ClusterIP
  ports:
    - port: 8888
      targetPort: kepler-metrics
      protocol: TCP
      name: metrics
  selector:
    {{- include "kvisor.agent.selectorLabels" . | nindent 4 }}
{{- end }}
