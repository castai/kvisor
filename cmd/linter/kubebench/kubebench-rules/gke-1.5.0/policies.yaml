controls: ""
version: gke-1.5.0
id: 4
text: Policies
type: policies
groups:
    - id: "4.1"
      text: RBAC and Service Accounts
      checks:
        - id: 4.1.1
          text: Ensure that the cluster-admin role is only used where required
          type: manual
          remediation: "Identify all clusterrolebindings to the cluster-admin role. Check if they are used and if they need this role or if they could use a role with fewer privileges. \n\nWhere possible, first bind users to a lower-privileged role and then remove the clusterrolebinding to the cluster-admin role :\n\n```\nkubectl delete clusterrolebinding [name]\n```"
          scored: false
        - id: 4.1.2
          text: Minimize access to secrets
          type: manual
          remediation: Where possible, remove `get`, `list` and `watch` access to `secret` objects in the cluster.
          scored: false
        - id: 4.1.3
          text: Minimize wildcard use in Roles and ClusterRoles
          type: manual
          remediation: Where possible replace any use of wildcards in clusterroles and roles with specific objects or actions.
          scored: false
        - id: 4.1.4
          text: Minimize access to create pods
          type: manual
          remediation: Where possible, remove `create` access to `pod` objects in the cluster.
          scored: false
        - id: 4.1.5
          text: Ensure that default service accounts are not actively used
          type: manual
          remediation: "Create explicit service accounts wherever a Kubernetes workload requires specific access to the Kubernetes API server.\n\nModify the configuration of each default service account to include this value \n\n```\nautomountServiceAccountToken: false\n```"
          scored: true
        - id: 4.1.6
          text: Ensure that Service Account Tokens are only mounted where necessary
          type: manual
          remediation: Modify the definition of pods and service accounts which do not need to mount service account tokens to disable it.
          scored: false
        - id: 4.1.7
          text: Avoid use of system:masters group
          type: manual
          remediation: Remove the `system:masters` group from all users in the cluster.
          scored: false
        - id: 4.1.8
          text: Limit use of the Bind, Impersonate and Escalate permissions in the Kubernetes cluster
          type: manual
          remediation: Where possible, remove the impersonate, bind and escalate rights from subjects.
          scored: false
        - id: 4.1.9
          text: Minimize access to create persistent volumes
          type: manual
          remediation: Where possible, remove `create` access to `PersistentVolume` objects in the cluster.
          scored: false
        - id: 4.1.10
          text: Minimize access to the proxy sub-resource of nodes
          type: manual
          remediation: Where possible, remove access to the `proxy` sub-resource of `node` objects.
          scored: false
        - id: 4.1.11
          text: Minimize access to the approval sub-resource of certificatesigningrequests objects
          type: manual
          remediation: Where possible, remove access to the `approval` sub-resource of `certificatesigningrequest` objects.
          scored: false
        - id: 4.1.12
          text: Minimize access to webhook configuration objects
          type: manual
          remediation: Where possible, remove access to the `validatingwebhookconfigurations` or `mutatingwebhookconfigurations` objects
          scored: false
        - id: 4.1.13
          text: Minimize access to the service account token creation
          type: manual
          remediation: Where possible, remove access to the `token` sub-resource of `serviceaccount` objects.
          scored: false
    - id: "4.2"
      text: Pod Security Standards
      checks:
        - id: 4.2.1
          text: Ensure that the cluster enforces Pod Security Standard Baseline profile or stricter for all namespaces.
          type: manual
          remediation: |-
            Ensure that Pod Security Admission is in place for every namespace which contains user workloads.

            Run the following command to enforce the Baseline profile in a namespace:-

            ```
            kubectl label namespace <namespace-name> pod-security.kubernetes.io/enforce=baseline
            ```
          scored: false
    - id: "4.3"
      text: Network Policies and CNI
      checks:
        - id: 4.3.1
          text: Ensure that the CNI in use supports Network Policies
          type: manual
          remediation: To use a CNI plugin with Network Policy, enable Network Policy in GKE, and the CNI plugin will be updated. See recommendation 5.6.7.
          scored: false
        - id: 4.3.2
          text: Ensure that all Namespaces have Network Policies defined
          type: manual
          remediation: |-
            Follow the documentation and create `NetworkPolicy` objects as needed.
            See: [https://cloud.google.com/kubernetes-engine/docs/how-to/network-policy#creating_a_network_policy](https://cloud.google.com/kubernetes-engine/docs/how-to/network-policy#creating_a_network_policy) for more information.
          scored: false
    - id: "4.4"
      text: Secrets Management
      checks:
        - id: 4.4.1
          text: Prefer using secrets as files over secrets as environment variables
          type: manual
          remediation: If possible, rewrite application code to read secrets from mounted secret files, rather than from environment variables.
          scored: false
        - id: 4.4.2
          text: Consider external secret storage
          type: manual
          remediation: Refer to the secrets management options offered by the cloud service provider or a third-party secrets management solution.
          scored: false
    - id: "4.5"
      text: Extensible Admission Control
      checks:
        - id: 4.5.1
          text: Configure Image Provenance using ImagePolicyWebhook admission controller
          type: manual
          remediation: |-
            Follow the Kubernetes documentation and setup image provenance.

            Also see recommendation 5.10.5.
          scored: false
    - id: "4.6"
      text: General Policies
      checks:
        - id: 4.6.1
          text: Create administrative boundaries between resources using namespaces
          type: manual
          remediation: Follow the documentation and create namespaces for objects in your deployment as you need them.
          scored: false
        - id: 4.6.2
          text: Ensure that the seccomp profile is set to RuntimeDefault in the pod definitions
          type: manual
          remediation: |-
            Use security context to enable the `RuntimeDefault` seccomp profile in your pod definitions. An example is as below:

            ```
             securityContext:
             seccompProfile:
             type: RuntimeDefault
            ```
          scored: false
        - id: 4.6.3
          text: Apply Security Context to Pods and Containers
          type: manual
          remediation: Follow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Google Container-Optimized OS Benchmark.
          scored: false
        - id: 4.6.4
          text: The default namespace should not be used
          type: manual
          remediation: Ensure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace.
          scored: false
