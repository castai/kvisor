images:
  - location: "https://cloud-images.ubuntu.com/releases/22.04/release/ubuntu-22.04-server-cloudimg-amd64.img"
    arch: "x86_64"
  - location: "https://cloud-images.ubuntu.com/releases/22.04/release/ubuntu-22.04-server-cloudimg-arm64.img"
    arch: "aarch64"
cpus: 4
memory: "10GiB"
mounts:
  - location: "~"
  - location: "/tmp/lima"
    writable: true
containerd:
  system: false
  user: false
provision:
  - mode: system
    script: |
      export DEBIAN_FRONTEND=noninteractive

      apt-get update

      apt-get install -y \
                apt-transport-https ca-certificates curl \
                sudo coreutils findutils  \
                bash git curl rsync \
                build-essential clang-14 clang-format-14 clang-tidy-14 clangd-14 llvm-14 make pkg-config \
                linux-headers-generic \
                libelf-dev \
                zlib1g-dev \
                libbpf-dev \
                linux-tools-generic

      update-alternatives --install /usr/bin/clang clang /usr/bin/clang-14 140 \
                          --slave /usr/bin/clang++ clang++ /usr/bin/clang++-14 \
                          --slave /usr/bin/llc llc /usr/bin/llc-14 \
                          --slave /usr/bin/clang-format clang-format /usr/bin/clang-format-14 \
                          --slave /usr/bin/clangd clangd /usr/bin/clangd-14 \
                          --slave /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-14

      apt-get install -y bash-completion vim \
              iproute2 vlan bridge-utils net-tools \
              netcat-openbsd iputils-ping \
              wget lynx \
              dnsutils
  - mode: user
    script: |
      curl -L https://nixos.org/nix/install | sh

      tempfile=$(mktemp) \
        && curl -fsSL https://get.jetpack.io/devbox -o $tempfile \
        && chmod +x $tempfile \
        && $tempfile -f \
        && rm $tempfile
  - mode: user
    script: |
      mkdir "$HOME/.config/nix"
      echo 'extra-experimental-features = flakes nix-command' > "$HOME/.config/nix/nix.conf"

      nix-env -i neovim git jq ripgrep fd nodejs go delta

      nix profile install \
                nixpkgs#protobuf nixpkgs#protoc-gen-go-grpc nixpkgs#protoc-gen-go \
                nixpkgs#kind nixpkgs#kubectl

  - mode: system
    # This script defines the host.docker.internal hostname when hostResolver is disabled.
    # It is also needed for lima 0.8.2 and earlier, which does not support hostResolver.hosts.
    # Names defined in /etc/hosts inside the VM are not resolved inside containers when
    # using the hostResolver; use hostResolver.hosts instead (requires lima 0.8.3 or later).
    script: |
      #!/bin/sh
      sed -i 's/host.lima.internal.*/host.lima.internal host.docker.internal/' /etc/hosts
  - mode: system
    script: |
      #!/bin/bash
      set -eux -o pipefail
      command -v docker >/dev/null 2>&1 && exit 0
      if [ ! -e /etc/systemd/system/docker.socket.d/override.conf ]; then
        mkdir -p /etc/systemd/system/docker.socket.d
        # Alternatively we could just add the user to the "docker" group, but that requires restarting the user session
        cat <<-EOF >/etc/systemd/system/docker.socket.d/override.conf
        [Socket]
        SocketUser={{.User}}
      EOF
      fi
      export DEBIAN_FRONTEND=noninteractive
      curl -fsSL https://get.docker.com | sh
probes:
  - script: |
      #!/bin/bash
      set -eux -o pipefail
      if ! timeout 30s bash -c "until command -v docker >/dev/null 2>&1; do sleep 3; done"; then
        echo >&2 "docker is not installed yet"
        exit 1
      fi
      if ! timeout 30s bash -c "until pgrep dockerd; do sleep 3; done"; then
        echo >&2 "dockerd is not running"
        exit 1
      fi
    hint: See "/var/log/cloud-init-output.log". in the guest
hostResolver:
  # hostResolver.hosts requires lima 0.8.3 or later. Names defined here will also
  # resolve inside containers, and not just inside the VM itself.
  hosts:
    host.docker.internal: host.lima.internal
portForwards:
  - guestSocket: "/var/run/docker.sock"
    hostSocket: "{{.Dir}}/sock/docker.sock"
message: |
  To run `docker` on the host (assumes docker-cli is installed), run the following commands:
  ------
  docker context create lima-{{.Name}} --docker "host=unix://{{.Dir}}/sock/docker.sock"
  docker context use lima-{{.Name}}
  docker run hello-world
  ------
mountType: "virtiofs"
vmType: "vz"
networks:
  - vzNAT: true
rosetta:
  enabled: true
  binfmt: true
