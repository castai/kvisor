images:
  - location: "https://cloud-images.ubuntu.com/releases/22.04/release/ubuntu-22.04-server-cloudimg-amd64.img"
    arch: "x86_64"
  - location: "https://cloud-images.ubuntu.com/releases/22.04/release/ubuntu-22.04-server-cloudimg-arm64.img"
    arch: "aarch64"
cpus: 2
memory: "4GiB"
mounts:
  - location: "~"
    writable: false
  - location: "/tmp/kvisor"
    writable: true
  - location: "/tmp/lima"
    writable: true
containerd:
  system: false
  user: false
provision:
  - mode: dependency
    script: |
      #!/bin/bash

      set -eux -o pipefail

      export DEBIAN_FRONTEND=noninteractive

      apt-get update && apt-get upgrade -y

      apt-get install -y \
                apt-transport-https ca-certificates curl \
                sudo coreutils findutils  \
                bash git curl rsync \
                build-essential make pkg-config \
                libelf-dev \
                zlib1g-dev \
                libbpf-dev \
                linux-headers-generic \
                linux-tools-generic \
                fish

      apt-get install -y bash-completion vim \
              iproute2 vlan bridge-utils net-tools \
              netcat-openbsd iputils-ping \
              wget \
              dnsutils

  - mode: dependency
    script: |
      #!/bin/bash

      set -eux -o pipefail

      export HOME=/root

      if [ -f /etc/bashrc ]; then
        source /etc/bashrc
      fi

      if [ ! $(command -v nix &> /dev/null) ] ; then
        echo 'installing nix...'
        curl -L https://nixos.org/nix/install | sh -s -- --daemon

        echo 'extra-experimental-features = flakes nix-command' | sudo tee -a /etc/nix/nix.conf
      fi

  - mode: dependency
    script: |
      #!/bin/bash

      set -eux -o pipefail

      export HOME=/root
      source /etc/bashrc

      # This command is expected to fail on first try after installation. For everything to be setup
      # correctly, the VM needs to be restarted.
      nix profile install \
              nixpkgs#git nixpkgs#jq nixpkgs#clang_14 nixpkgs#llvmPackages_14.clang-tools nixpkgs#llvm_14 \
              nixpkgs#devbox nixpkgs#bpftrace

      # In order to fix nix usage with sudo, allow the /nix/var/nix/profiles env var to be passed in as PATH
      cat <<EOF > /etc/sudoers.d/nix
      Defaults        secure_path="/nix/var/nix/profiles/default/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"
      EOF

  - mode: system
    # This script defines the host.docker.internal hostname when hostResolver is disabled.
    # It is also needed for lima 0.8.2 and earlier, which does not support hostResolver.hosts.
    # Names defined in /etc/hosts inside the VM are not resolved inside containers when
    # using the hostResolver; use hostResolver.hosts instead (requires lima 0.8.3 or later).
    script: |
      #!/bin/sh
      sed -i 's/host.lima.internal.*/host.lima.internal host.docker.internal/' /etc/hosts

  # Increase file watches limit.
  - mode: system
    script: |
      #!/bin/sh
      sysctl fs.inotify.max_user_watches=524288
      sysctl fs.inotify.max_user_instances=512

  - mode: system
    script: |
      #!/bin/bash
      set -eux -o pipefail
      command -v docker >/dev/null 2>&1 && exit 0
      if [ ! -e /etc/systemd/system/docker.socket.d/override.conf ]; then
        mkdir -p /etc/systemd/system/docker.socket.d
        # Alternatively we could just add the user to the "docker" group, but that requires restarting the user session
        cat <<-EOF >/etc/systemd/system/docker.socket.d/override.conf
        [Socket]
        SocketUser={{.User}}
      EOF
      fi
      export DEBIAN_FRONTEND=noninteractive
      curl -fsSL https://get.docker.com | sh
probes:
  - script: |
      #!/bin/bash
      set -eux -o pipefail
      if ! timeout 30s bash -c "until command -v docker >/dev/null 2>&1; do sleep 3; done"; then
        echo >&2 "docker is not installed yet"
        exit 1
      fi
      if ! timeout 30s bash -c "until pgrep dockerd; do sleep 3; done"; then
        echo >&2 "dockerd is not running"
        exit 1
      fi
    hint: See "/var/log/cloud-init-output.log". in the guest
hostResolver:
  # hostResolver.hosts requires lima 0.8.3 or later. Names defined here will also
  # resolve inside containers, and not just inside the VM itself.
  hosts:
    host.docker.internal: host.lima.internal
portForwards:
  - guestSocket: "/var/run/docker.sock"
    hostSocket: "{{.Dir}}/sock/docker.sock"
message: |
  To run `docker` on the host (assumes docker-cli is installed), run the following commands:
  ------
  docker context create lima-{{.Name}} --docker "host=unix://{{.Dir}}/sock/docker.sock"
  docker context use lima-{{.Name}}
  docker run hello-world
  ------
mountType: "virtiofs"
vmType: "vz"
networks:
  - vzNAT: true
rosetta:
  enabled: true
  binfmt: true
