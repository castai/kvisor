// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: api/v1/runtime/runtime_agent_api.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventType int32

const (
	EventType_UNKNOWN                 EventType = 0
	EventType_EVENT_EXEC              EventType = 1
	EventType_EVENT_DNS               EventType = 2
	EventType_EVENT_TCP_CONNECT       EventType = 3
	EventType_EVENT_TCP_CONNECT_ERROR EventType = 4
	EventType_EVENT_TCP_LISTEN        EventType = 5
	EventType_EVENT_FILE_CHANGE       EventType = 6
	EventType_EVENT_PROCESS_OOM       EventType = 7
	EventType_EVENT_MAGIC_WRITE       EventType = 8
	EventType_EVENT_SIGNATURE         EventType = 9
	EventType_EVENT_TTY_WRITE         EventType = 10
	EventType_EVENT_STDIO_VIA_SOCKET  EventType = 11
	EventType_EVENT_SSH               EventType = 12
	EventType_EVENT_PROCESS_FORK      EventType = 13
	EventType_EVENT_PROCESS_EXIT      EventType = 14
	EventType_EVENT_FILE_OPEN         EventType = 15
	EventType_EVENT_ANY               EventType = 999
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0:   "UNKNOWN",
		1:   "EVENT_EXEC",
		2:   "EVENT_DNS",
		3:   "EVENT_TCP_CONNECT",
		4:   "EVENT_TCP_CONNECT_ERROR",
		5:   "EVENT_TCP_LISTEN",
		6:   "EVENT_FILE_CHANGE",
		7:   "EVENT_PROCESS_OOM",
		8:   "EVENT_MAGIC_WRITE",
		9:   "EVENT_SIGNATURE",
		10:  "EVENT_TTY_WRITE",
		11:  "EVENT_STDIO_VIA_SOCKET",
		12:  "EVENT_SSH",
		13:  "EVENT_PROCESS_FORK",
		14:  "EVENT_PROCESS_EXIT",
		15:  "EVENT_FILE_OPEN",
		999: "EVENT_ANY",
	}
	EventType_value = map[string]int32{
		"UNKNOWN":                 0,
		"EVENT_EXEC":              1,
		"EVENT_DNS":               2,
		"EVENT_TCP_CONNECT":       3,
		"EVENT_TCP_CONNECT_ERROR": 4,
		"EVENT_TCP_LISTEN":        5,
		"EVENT_FILE_CHANGE":       6,
		"EVENT_PROCESS_OOM":       7,
		"EVENT_MAGIC_WRITE":       8,
		"EVENT_SIGNATURE":         9,
		"EVENT_TTY_WRITE":         10,
		"EVENT_STDIO_VIA_SOCKET":  11,
		"EVENT_SSH":               12,
		"EVENT_PROCESS_FORK":      13,
		"EVENT_PROCESS_EXIT":      14,
		"EVENT_FILE_OPEN":         15,
		"EVENT_ANY":               999,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_runtime_runtime_agent_api_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_api_v1_runtime_runtime_agent_api_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{0}
}

type WorkloadKind int32

const (
	WorkloadKind_WORKLOAD_KIND_UNKNOWN      WorkloadKind = 0
	WorkloadKind_WORKLOAD_KIND_DEPLOYMENT   WorkloadKind = 1
	WorkloadKind_WORKLOAD_KIND_REPLICA_SET  WorkloadKind = 2
	WorkloadKind_WORKLOAD_KIND_STATEFUL_SET WorkloadKind = 3
	WorkloadKind_WORKLOAD_KIND_JOB          WorkloadKind = 4
	WorkloadKind_WORKLOAD_KIND_CRONJOB      WorkloadKind = 5
	WorkloadKind_WORKLOAD_KIND_POD          WorkloadKind = 6
)

// Enum value maps for WorkloadKind.
var (
	WorkloadKind_name = map[int32]string{
		0: "WORKLOAD_KIND_UNKNOWN",
		1: "WORKLOAD_KIND_DEPLOYMENT",
		2: "WORKLOAD_KIND_REPLICA_SET",
		3: "WORKLOAD_KIND_STATEFUL_SET",
		4: "WORKLOAD_KIND_JOB",
		5: "WORKLOAD_KIND_CRONJOB",
		6: "WORKLOAD_KIND_POD",
	}
	WorkloadKind_value = map[string]int32{
		"WORKLOAD_KIND_UNKNOWN":      0,
		"WORKLOAD_KIND_DEPLOYMENT":   1,
		"WORKLOAD_KIND_REPLICA_SET":  2,
		"WORKLOAD_KIND_STATEFUL_SET": 3,
		"WORKLOAD_KIND_JOB":          4,
		"WORKLOAD_KIND_CRONJOB":      5,
		"WORKLOAD_KIND_POD":          6,
	}
)

func (x WorkloadKind) Enum() *WorkloadKind {
	p := new(WorkloadKind)
	*p = x
	return p
}

func (x WorkloadKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkloadKind) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_runtime_runtime_agent_api_proto_enumTypes[1].Descriptor()
}

func (WorkloadKind) Type() protoreflect.EnumType {
	return &file_api_v1_runtime_runtime_agent_api_proto_enumTypes[1]
}

func (x WorkloadKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkloadKind.Descriptor instead.
func (WorkloadKind) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{1}
}

type ImageScanStatus int32

const (
	ImageScanStatus_IMAGE_SCAN_STATUS_UNKNOWN    ImageScanStatus = 0
	ImageScanStatus_IMAGE_SCAN_STATUS_SCANNED    ImageScanStatus = 1
	ImageScanStatus_IMAGE_SCAN_STATUS_PENDING    ImageScanStatus = 2
	ImageScanStatus_IMAGE_SCAN_STATUS_SCAN_ERROR ImageScanStatus = 3
)

// Enum value maps for ImageScanStatus.
var (
	ImageScanStatus_name = map[int32]string{
		0: "IMAGE_SCAN_STATUS_UNKNOWN",
		1: "IMAGE_SCAN_STATUS_SCANNED",
		2: "IMAGE_SCAN_STATUS_PENDING",
		3: "IMAGE_SCAN_STATUS_SCAN_ERROR",
	}
	ImageScanStatus_value = map[string]int32{
		"IMAGE_SCAN_STATUS_UNKNOWN":    0,
		"IMAGE_SCAN_STATUS_SCANNED":    1,
		"IMAGE_SCAN_STATUS_PENDING":    2,
		"IMAGE_SCAN_STATUS_SCAN_ERROR": 3,
	}
)

func (x ImageScanStatus) Enum() *ImageScanStatus {
	p := new(ImageScanStatus)
	*p = x
	return p
}

func (x ImageScanStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageScanStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_runtime_runtime_agent_api_proto_enumTypes[2].Descriptor()
}

func (ImageScanStatus) Type() protoreflect.EnumType {
	return &file_api_v1_runtime_runtime_agent_api_proto_enumTypes[2]
}

func (x ImageScanStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageScanStatus.Descriptor instead.
func (ImageScanStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{2}
}

type ProcessAction int32

const (
	ProcessAction_PROCESS_ACTION_UNKNOWN ProcessAction = 0
	ProcessAction_PROCESS_ACTION_EXEC    ProcessAction = 1
	ProcessAction_PROCESS_ACTION_FORK    ProcessAction = 2
	ProcessAction_PROCESS_ACTION_EXIT    ProcessAction = 3
)

// Enum value maps for ProcessAction.
var (
	ProcessAction_name = map[int32]string{
		0: "PROCESS_ACTION_UNKNOWN",
		1: "PROCESS_ACTION_EXEC",
		2: "PROCESS_ACTION_FORK",
		3: "PROCESS_ACTION_EXIT",
	}
	ProcessAction_value = map[string]int32{
		"PROCESS_ACTION_UNKNOWN": 0,
		"PROCESS_ACTION_EXEC":    1,
		"PROCESS_ACTION_FORK":    2,
		"PROCESS_ACTION_EXIT":    3,
	}
)

func (x ProcessAction) Enum() *ProcessAction {
	p := new(ProcessAction)
	*p = x
	return p
}

func (x ProcessAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessAction) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_runtime_runtime_agent_api_proto_enumTypes[3].Descriptor()
}

func (ProcessAction) Type() protoreflect.EnumType {
	return &file_api_v1_runtime_runtime_agent_api_proto_enumTypes[3]
}

func (x ProcessAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessAction.Descriptor instead.
func (ProcessAction) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{3}
}

type WriteDataBatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*DataBatchItem       `protobuf:"bytes,10,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteDataBatchRequest) Reset() {
	*x = WriteDataBatchRequest{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteDataBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteDataBatchRequest) ProtoMessage() {}

func (x *WriteDataBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteDataBatchRequest.ProtoReflect.Descriptor instead.
func (*WriteDataBatchRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{0}
}

func (x *WriteDataBatchRequest) GetItems() []*DataBatchItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type WriteDataBatchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteDataBatchResponse) Reset() {
	*x = WriteDataBatchResponse{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteDataBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteDataBatchResponse) ProtoMessage() {}

func (x *WriteDataBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteDataBatchResponse.ProtoReflect.Descriptor instead.
func (*WriteDataBatchResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{1}
}

type DataBatchItem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Data:
	//
	//	*DataBatchItem_ContainerStats
	//	*DataBatchItem_NodeStats
	//	*DataBatchItem_ContainerEvents
	//	*DataBatchItem_Netflow
	//	*DataBatchItem_ProcessTree
	Data          isDataBatchItem_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataBatchItem) Reset() {
	*x = DataBatchItem{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataBatchItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataBatchItem) ProtoMessage() {}

func (x *DataBatchItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataBatchItem.ProtoReflect.Descriptor instead.
func (*DataBatchItem) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{2}
}

func (x *DataBatchItem) GetData() isDataBatchItem_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DataBatchItem) GetContainerStats() *ContainerStats {
	if x != nil {
		if x, ok := x.Data.(*DataBatchItem_ContainerStats); ok {
			return x.ContainerStats
		}
	}
	return nil
}

func (x *DataBatchItem) GetNodeStats() *NodeStats {
	if x != nil {
		if x, ok := x.Data.(*DataBatchItem_NodeStats); ok {
			return x.NodeStats
		}
	}
	return nil
}

func (x *DataBatchItem) GetContainerEvents() *ContainerEvents {
	if x != nil {
		if x, ok := x.Data.(*DataBatchItem_ContainerEvents); ok {
			return x.ContainerEvents
		}
	}
	return nil
}

func (x *DataBatchItem) GetNetflow() *Netflow {
	if x != nil {
		if x, ok := x.Data.(*DataBatchItem_Netflow); ok {
			return x.Netflow
		}
	}
	return nil
}

func (x *DataBatchItem) GetProcessTree() *ProcessTreeEvent {
	if x != nil {
		if x, ok := x.Data.(*DataBatchItem_ProcessTree); ok {
			return x.ProcessTree
		}
	}
	return nil
}

type isDataBatchItem_Data interface {
	isDataBatchItem_Data()
}

type DataBatchItem_ContainerStats struct {
	ContainerStats *ContainerStats `protobuf:"bytes,10,opt,name=container_stats,json=containerStats,proto3,oneof"`
}

type DataBatchItem_NodeStats struct {
	NodeStats *NodeStats `protobuf:"bytes,11,opt,name=node_stats,json=nodeStats,proto3,oneof"`
}

type DataBatchItem_ContainerEvents struct {
	ContainerEvents *ContainerEvents `protobuf:"bytes,12,opt,name=container_events,json=containerEvents,proto3,oneof"`
}

type DataBatchItem_Netflow struct {
	Netflow *Netflow `protobuf:"bytes,13,opt,name=netflow,proto3,oneof"`
}

type DataBatchItem_ProcessTree struct {
	ProcessTree *ProcessTreeEvent `protobuf:"bytes,14,opt,name=process_tree,json=processTree,proto3,oneof"`
}

func (*DataBatchItem_ContainerStats) isDataBatchItem_Data() {}

func (*DataBatchItem_NodeStats) isDataBatchItem_Data() {}

func (*DataBatchItem_ContainerEvents) isDataBatchItem_Data() {}

func (*DataBatchItem_Netflow) isDataBatchItem_Data() {}

func (*DataBatchItem_ProcessTree) isDataBatchItem_Data() {}

type GetConfigurationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to CurrentConfig:
	//
	//	*GetConfigurationRequest_Controller
	//	*GetConfigurationRequest_Agent
	CurrentConfig isGetConfigurationRequest_CurrentConfig `protobuf_oneof:"current_config"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConfigurationRequest) Reset() {
	*x = GetConfigurationRequest{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigurationRequest) ProtoMessage() {}

func (x *GetConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigurationRequest.ProtoReflect.Descriptor instead.
func (*GetConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{3}
}

func (x *GetConfigurationRequest) GetCurrentConfig() isGetConfigurationRequest_CurrentConfig {
	if x != nil {
		return x.CurrentConfig
	}
	return nil
}

func (x *GetConfigurationRequest) GetController() []byte {
	if x != nil {
		if x, ok := x.CurrentConfig.(*GetConfigurationRequest_Controller); ok {
			return x.Controller
		}
	}
	return nil
}

func (x *GetConfigurationRequest) GetAgent() []byte {
	if x != nil {
		if x, ok := x.CurrentConfig.(*GetConfigurationRequest_Agent); ok {
			return x.Agent
		}
	}
	return nil
}

type isGetConfigurationRequest_CurrentConfig interface {
	isGetConfigurationRequest_CurrentConfig()
}

type GetConfigurationRequest_Controller struct {
	Controller []byte `protobuf:"bytes,3,opt,name=controller,proto3,oneof"`
}

type GetConfigurationRequest_Agent struct {
	Agent []byte `protobuf:"bytes,4,opt,name=agent,proto3,oneof"`
}

func (*GetConfigurationRequest_Controller) isGetConfigurationRequest_CurrentConfig() {}

func (*GetConfigurationRequest_Agent) isGetConfigurationRequest_CurrentConfig() {}

type GetConfigurationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *Configuration         `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConfigurationResponse) Reset() {
	*x = GetConfigurationResponse{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigurationResponse) ProtoMessage() {}

func (x *GetConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigurationResponse.ProtoReflect.Descriptor instead.
func (*GetConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{4}
}

func (x *GetConfigurationResponse) GetConfig() *Configuration {
	if x != nil {
		return x.Config
	}
	return nil
}

type Configuration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{5}
}

type ProcessIdentity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pid           uint32                 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	StartTime     uint64                 `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessIdentity) Reset() {
	*x = ProcessIdentity{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessIdentity) ProtoMessage() {}

func (x *ProcessIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessIdentity.ProtoReflect.Descriptor instead.
func (*ProcessIdentity) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{6}
}

func (x *ProcessIdentity) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ProcessIdentity) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

type ContainerEvents struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	NodeName          string                 `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	Namespace         string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkloadName      string                 `protobuf:"bytes,3,opt,name=workload_name,json=workloadName,proto3" json:"workload_name,omitempty"`
	WorkloadUid       string                 `protobuf:"bytes,4,opt,name=workload_uid,json=workloadUid,proto3" json:"workload_uid,omitempty"`
	WorkloadKind      WorkloadKind           `protobuf:"varint,5,opt,name=workload_kind,json=workloadKind,proto3,enum=runtime.v1.WorkloadKind" json:"workload_kind,omitempty"`
	PodName           string                 `protobuf:"bytes,6,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	ContainerName     string                 `protobuf:"bytes,7,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	ContainerId       string                 `protobuf:"bytes,8,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	PodUid            string                 `protobuf:"bytes,9,opt,name=pod_uid,json=podUid,proto3" json:"pod_uid,omitempty"`
	ImageDigest       string                 `protobuf:"bytes,14,opt,name=image_digest,json=imageDigest,proto3" json:"image_digest,omitempty"`
	ObjectLabels      map[string]string      `protobuf:"bytes,10,rep,name=object_labels,json=objectLabels,proto3" json:"object_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ObjectAnnotations map[string]string      `protobuf:"bytes,11,rep,name=object_annotations,json=objectAnnotations,proto3" json:"object_annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CgroupId          uint64                 `protobuf:"varint,12,opt,name=cgroup_id,json=cgroupId,proto3" json:"cgroup_id,omitempty"`
	Items             []*ContainerEvent      `protobuf:"bytes,13,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ContainerEvents) Reset() {
	*x = ContainerEvents{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerEvents) ProtoMessage() {}

func (x *ContainerEvents) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerEvents.ProtoReflect.Descriptor instead.
func (*ContainerEvents) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{7}
}

func (x *ContainerEvents) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *ContainerEvents) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ContainerEvents) GetWorkloadName() string {
	if x != nil {
		return x.WorkloadName
	}
	return ""
}

func (x *ContainerEvents) GetWorkloadUid() string {
	if x != nil {
		return x.WorkloadUid
	}
	return ""
}

func (x *ContainerEvents) GetWorkloadKind() WorkloadKind {
	if x != nil {
		return x.WorkloadKind
	}
	return WorkloadKind_WORKLOAD_KIND_UNKNOWN
}

func (x *ContainerEvents) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *ContainerEvents) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *ContainerEvents) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *ContainerEvents) GetPodUid() string {
	if x != nil {
		return x.PodUid
	}
	return ""
}

func (x *ContainerEvents) GetImageDigest() string {
	if x != nil {
		return x.ImageDigest
	}
	return ""
}

func (x *ContainerEvents) GetObjectLabels() map[string]string {
	if x != nil {
		return x.ObjectLabels
	}
	return nil
}

func (x *ContainerEvents) GetObjectAnnotations() map[string]string {
	if x != nil {
		return x.ObjectAnnotations
	}
	return nil
}

func (x *ContainerEvents) GetCgroupId() uint64 {
	if x != nil {
		return x.CgroupId
	}
	return 0
}

func (x *ContainerEvents) GetItems() []*ContainerEvent {
	if x != nil {
		return x.Items
	}
	return nil
}

type ContainerEvent struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	EventType              EventType              `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=runtime.v1.EventType" json:"event_type,omitempty"`
	Timestamp              uint64                 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ProcessStartTime       uint64                 `protobuf:"varint,4,opt,name=process_start_time,json=processStartTime,proto3" json:"process_start_time,omitempty"`
	HostPid                uint32                 `protobuf:"varint,5,opt,name=host_pid,json=hostPid,proto3" json:"host_pid,omitempty"`
	Pid                    uint32                 `protobuf:"varint,6,opt,name=pid,proto3" json:"pid,omitempty"`
	Ppid                   uint32                 `protobuf:"varint,7,opt,name=ppid,proto3" json:"ppid,omitempty"`
	ProcessParentStartTime uint64                 `protobuf:"varint,8,opt,name=process_parent_start_time,json=processParentStartTime,proto3" json:"process_parent_start_time,omitempty"`
	ProcessName            string                 `protobuf:"bytes,9,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	// Types that are valid to be assigned to Data:
	//
	//	*ContainerEvent_Exec
	//	*ContainerEvent_Dns
	//	*ContainerEvent_File
	//	*ContainerEvent_Tuple
	//	*ContainerEvent_Signature
	//	*ContainerEvent_Any
	//	*ContainerEvent_StdioViaSocket
	//	*ContainerEvent_Ssh
	//	*ContainerEvent_ProcessFork
	//	*ContainerEvent_ProcessExit
	Data          isContainerEvent_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContainerEvent) Reset() {
	*x = ContainerEvent{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerEvent) ProtoMessage() {}

func (x *ContainerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerEvent.ProtoReflect.Descriptor instead.
func (*ContainerEvent) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{8}
}

func (x *ContainerEvent) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_UNKNOWN
}

func (x *ContainerEvent) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ContainerEvent) GetProcessStartTime() uint64 {
	if x != nil {
		return x.ProcessStartTime
	}
	return 0
}

func (x *ContainerEvent) GetHostPid() uint32 {
	if x != nil {
		return x.HostPid
	}
	return 0
}

func (x *ContainerEvent) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ContainerEvent) GetPpid() uint32 {
	if x != nil {
		return x.Ppid
	}
	return 0
}

func (x *ContainerEvent) GetProcessParentStartTime() uint64 {
	if x != nil {
		return x.ProcessParentStartTime
	}
	return 0
}

func (x *ContainerEvent) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *ContainerEvent) GetData() isContainerEvent_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ContainerEvent) GetExec() *Exec {
	if x != nil {
		if x, ok := x.Data.(*ContainerEvent_Exec); ok {
			return x.Exec
		}
	}
	return nil
}

func (x *ContainerEvent) GetDns() *DNS {
	if x != nil {
		if x, ok := x.Data.(*ContainerEvent_Dns); ok {
			return x.Dns
		}
	}
	return nil
}

func (x *ContainerEvent) GetFile() *File {
	if x != nil {
		if x, ok := x.Data.(*ContainerEvent_File); ok {
			return x.File
		}
	}
	return nil
}

func (x *ContainerEvent) GetTuple() *Tuple {
	if x != nil {
		if x, ok := x.Data.(*ContainerEvent_Tuple); ok {
			return x.Tuple
		}
	}
	return nil
}

func (x *ContainerEvent) GetSignature() *SignatureEvent {
	if x != nil {
		if x, ok := x.Data.(*ContainerEvent_Signature); ok {
			return x.Signature
		}
	}
	return nil
}

func (x *ContainerEvent) GetAny() *Any {
	if x != nil {
		if x, ok := x.Data.(*ContainerEvent_Any); ok {
			return x.Any
		}
	}
	return nil
}

func (x *ContainerEvent) GetStdioViaSocket() *StdioViaSocketFinding {
	if x != nil {
		if x, ok := x.Data.(*ContainerEvent_StdioViaSocket); ok {
			return x.StdioViaSocket
		}
	}
	return nil
}

func (x *ContainerEvent) GetSsh() *SSHData {
	if x != nil {
		if x, ok := x.Data.(*ContainerEvent_Ssh); ok {
			return x.Ssh
		}
	}
	return nil
}

func (x *ContainerEvent) GetProcessFork() *ProcessFork {
	if x != nil {
		if x, ok := x.Data.(*ContainerEvent_ProcessFork); ok {
			return x.ProcessFork
		}
	}
	return nil
}

func (x *ContainerEvent) GetProcessExit() *ProcessExit {
	if x != nil {
		if x, ok := x.Data.(*ContainerEvent_ProcessExit); ok {
			return x.ProcessExit
		}
	}
	return nil
}

type isContainerEvent_Data interface {
	isContainerEvent_Data()
}

type ContainerEvent_Exec struct {
	Exec *Exec `protobuf:"bytes,21,opt,name=exec,proto3,oneof"`
}

type ContainerEvent_Dns struct {
	Dns *DNS `protobuf:"bytes,22,opt,name=dns,proto3,oneof"`
}

type ContainerEvent_File struct {
	File *File `protobuf:"bytes,23,opt,name=file,proto3,oneof"`
}

type ContainerEvent_Tuple struct {
	Tuple *Tuple `protobuf:"bytes,24,opt,name=tuple,proto3,oneof"`
}

type ContainerEvent_Signature struct {
	Signature *SignatureEvent `protobuf:"bytes,25,opt,name=signature,proto3,oneof"`
}

type ContainerEvent_Any struct {
	Any *Any `protobuf:"bytes,26,opt,name=any,proto3,oneof"`
}

type ContainerEvent_StdioViaSocket struct {
	StdioViaSocket *StdioViaSocketFinding `protobuf:"bytes,27,opt,name=stdio_via_socket,json=stdioViaSocket,proto3,oneof"`
}

type ContainerEvent_Ssh struct {
	Ssh *SSHData `protobuf:"bytes,28,opt,name=ssh,proto3,oneof"`
}

type ContainerEvent_ProcessFork struct {
	ProcessFork *ProcessFork `protobuf:"bytes,29,opt,name=process_fork,json=processFork,proto3,oneof"`
}

type ContainerEvent_ProcessExit struct {
	ProcessExit *ProcessExit `protobuf:"bytes,30,opt,name=process_exit,json=processExit,proto3,oneof"`
}

func (*ContainerEvent_Exec) isContainerEvent_Data() {}

func (*ContainerEvent_Dns) isContainerEvent_Data() {}

func (*ContainerEvent_File) isContainerEvent_Data() {}

func (*ContainerEvent_Tuple) isContainerEvent_Data() {}

func (*ContainerEvent_Signature) isContainerEvent_Data() {}

func (*ContainerEvent_Any) isContainerEvent_Data() {}

func (*ContainerEvent_StdioViaSocket) isContainerEvent_Data() {}

func (*ContainerEvent_Ssh) isContainerEvent_Data() {}

func (*ContainerEvent_ProcessFork) isContainerEvent_Data() {}

func (*ContainerEvent_ProcessExit) isContainerEvent_Data() {}

type WriteStreamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteStreamResponse) Reset() {
	*x = WriteStreamResponse{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteStreamResponse) ProtoMessage() {}

func (x *WriteStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteStreamResponse.ProtoReflect.Descriptor instead.
func (*WriteStreamResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{9}
}

type SendLogsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendLogsResponse) Reset() {
	*x = SendLogsResponse{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendLogsResponse) ProtoMessage() {}

func (x *SendLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendLogsResponse.ProtoReflect.Descriptor instead.
func (*SendLogsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{10}
}

type ContainerStats struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Namespace        string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	PodName          string                 `protobuf:"bytes,2,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	ContainerName    string                 `protobuf:"bytes,3,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	WorkloadName     string                 `protobuf:"bytes,4,opt,name=workload_name,json=workloadName,proto3" json:"workload_name,omitempty"`
	WorkloadKind     string                 `protobuf:"bytes,7,opt,name=workload_kind,json=workloadKind,proto3" json:"workload_kind,omitempty"`
	PodUid           string                 `protobuf:"bytes,5,opt,name=pod_uid,json=podUid,proto3" json:"pod_uid,omitempty"`
	ContainerId      string                 `protobuf:"bytes,6,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	NodeName         string                 `protobuf:"bytes,8,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	WorkloadUid      string                 `protobuf:"bytes,9,opt,name=workload_uid,json=workloadUid,proto3" json:"workload_uid,omitempty"`
	CgroupId         uint64                 `protobuf:"varint,10,opt,name=cgroup_id,json=cgroupId,proto3" json:"cgroup_id,omitempty"`
	CpuStats         *CpuStats              `protobuf:"bytes,21,opt,name=cpu_stats,json=cpuStats,proto3" json:"cpu_stats,omitempty"`
	MemoryStats      *MemoryStats           `protobuf:"bytes,22,opt,name=memory_stats,json=memoryStats,proto3" json:"memory_stats,omitempty"`
	PidsStats        *PidsStats             `protobuf:"bytes,23,opt,name=pids_stats,json=pidsStats,proto3" json:"pids_stats,omitempty"`
	IoStats          *IOStats               `protobuf:"bytes,24,opt,name=io_stats,json=ioStats,proto3" json:"io_stats,omitempty"`
	FilesAccessStats *FilesAccessStats      `protobuf:"bytes,25,opt,name=files_access_stats,json=filesAccessStats,proto3" json:"files_access_stats,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ContainerStats) Reset() {
	*x = ContainerStats{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStats) ProtoMessage() {}

func (x *ContainerStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStats.ProtoReflect.Descriptor instead.
func (*ContainerStats) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{11}
}

func (x *ContainerStats) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ContainerStats) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *ContainerStats) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *ContainerStats) GetWorkloadName() string {
	if x != nil {
		return x.WorkloadName
	}
	return ""
}

func (x *ContainerStats) GetWorkloadKind() string {
	if x != nil {
		return x.WorkloadKind
	}
	return ""
}

func (x *ContainerStats) GetPodUid() string {
	if x != nil {
		return x.PodUid
	}
	return ""
}

func (x *ContainerStats) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *ContainerStats) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *ContainerStats) GetWorkloadUid() string {
	if x != nil {
		return x.WorkloadUid
	}
	return ""
}

func (x *ContainerStats) GetCgroupId() uint64 {
	if x != nil {
		return x.CgroupId
	}
	return 0
}

func (x *ContainerStats) GetCpuStats() *CpuStats {
	if x != nil {
		return x.CpuStats
	}
	return nil
}

func (x *ContainerStats) GetMemoryStats() *MemoryStats {
	if x != nil {
		return x.MemoryStats
	}
	return nil
}

func (x *ContainerStats) GetPidsStats() *PidsStats {
	if x != nil {
		return x.PidsStats
	}
	return nil
}

func (x *ContainerStats) GetIoStats() *IOStats {
	if x != nil {
		return x.IoStats
	}
	return nil
}

func (x *ContainerStats) GetFilesAccessStats() *FilesAccessStats {
	if x != nil {
		return x.FilesAccessStats
	}
	return nil
}

type FilesAccessStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Paths         []string               `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
	Reads         []uint32               `protobuf:"varint,2,rep,packed,name=reads,proto3" json:"reads,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilesAccessStats) Reset() {
	*x = FilesAccessStats{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilesAccessStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesAccessStats) ProtoMessage() {}

func (x *FilesAccessStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesAccessStats.ProtoReflect.Descriptor instead.
func (*FilesAccessStats) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{12}
}

func (x *FilesAccessStats) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *FilesAccessStats) GetReads() []uint32 {
	if x != nil {
		return x.Reads
	}
	return nil
}

type NodeStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeName      string                 `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	CpuStats      *CpuStats              `protobuf:"bytes,21,opt,name=cpu_stats,json=cpuStats,proto3" json:"cpu_stats,omitempty"`
	MemoryStats   *MemoryStats           `protobuf:"bytes,22,opt,name=memory_stats,json=memoryStats,proto3" json:"memory_stats,omitempty"`
	IoStats       *IOStats               `protobuf:"bytes,23,opt,name=io_stats,json=ioStats,proto3" json:"io_stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeStats) Reset() {
	*x = NodeStats{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStats) ProtoMessage() {}

func (x *NodeStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStats.ProtoReflect.Descriptor instead.
func (*NodeStats) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{13}
}

func (x *NodeStats) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *NodeStats) GetCpuStats() *CpuStats {
	if x != nil {
		return x.CpuStats
	}
	return nil
}

func (x *NodeStats) GetMemoryStats() *MemoryStats {
	if x != nil {
		return x.MemoryStats
	}
	return nil
}

func (x *NodeStats) GetIoStats() *IOStats {
	if x != nil {
		return x.IoStats
	}
	return nil
}

type ImageMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ImageName     string                 `protobuf:"bytes,1,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	ImageId       string                 `protobuf:"bytes,2,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	ImageDigest   string                 `protobuf:"bytes,3,opt,name=image_digest,json=imageDigest,proto3" json:"image_digest,omitempty"`
	Architecture  string                 `protobuf:"bytes,5,opt,name=architecture,proto3" json:"architecture,omitempty"` // used as fallback, in case image manifest doesn't have architecture set
	OsName        string                 `protobuf:"bytes,6,opt,name=os_name,json=osName,proto3" json:"os_name,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ResourceIds   []string               `protobuf:"bytes,8,rep,name=resource_ids,json=resourceIds,proto3" json:"resource_ids,omitempty"`
	Packages      []byte                 `protobuf:"bytes,9,opt,name=packages,proto3" json:"packages,omitempty"`                        // JSON containing []github.com/aquasecurity/trivy/pkg/fanal/types.BlobInfo type.
	Manifest      []byte                 `protobuf:"bytes,10,opt,name=manifest,proto3" json:"manifest,omitempty"`                       // JSON containing github.com/google/go-containerregistry/pkg/v1.Manifest type.
	Index         []byte                 `protobuf:"bytes,11,opt,name=index,proto3" json:"index,omitempty"`                             // JSON containing github.com/google/go-containerregistry/pkg/v1.IndexManifest type.
	ConfigFile    []byte                 `protobuf:"bytes,12,opt,name=config_file,json=configFile,proto3" json:"config_file,omitempty"` // JSON containing github.com/google/go-containerregistry/pkg/v1.ConfigFile type.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageMetadata) Reset() {
	*x = ImageMetadata{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageMetadata) ProtoMessage() {}

func (x *ImageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageMetadata.ProtoReflect.Descriptor instead.
func (*ImageMetadata) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{14}
}

func (x *ImageMetadata) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *ImageMetadata) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *ImageMetadata) GetImageDigest() string {
	if x != nil {
		return x.ImageDigest
	}
	return ""
}

func (x *ImageMetadata) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *ImageMetadata) GetOsName() string {
	if x != nil {
		return x.OsName
	}
	return ""
}

func (x *ImageMetadata) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ImageMetadata) GetResourceIds() []string {
	if x != nil {
		return x.ResourceIds
	}
	return nil
}

func (x *ImageMetadata) GetPackages() []byte {
	if x != nil {
		return x.Packages
	}
	return nil
}

func (x *ImageMetadata) GetManifest() []byte {
	if x != nil {
		return x.Manifest
	}
	return nil
}

func (x *ImageMetadata) GetIndex() []byte {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *ImageMetadata) GetConfigFile() []byte {
	if x != nil {
		return x.ConfigFile
	}
	return nil
}

type ImageMetadataIngestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageMetadataIngestResponse) Reset() {
	*x = ImageMetadataIngestResponse{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageMetadataIngestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageMetadataIngestResponse) ProtoMessage() {}

func (x *ImageMetadataIngestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageMetadataIngestResponse.ProtoReflect.Descriptor instead.
func (*ImageMetadataIngestResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{15}
}

type GetSyncStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ImageIds      []string               `protobuf:"bytes,1,rep,name=image_ids,json=imageIds,proto3" json:"image_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSyncStateRequest) Reset() {
	*x = GetSyncStateRequest{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSyncStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSyncStateRequest) ProtoMessage() {}

func (x *GetSyncStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSyncStateRequest.ProtoReflect.Descriptor instead.
func (*GetSyncStateRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{16}
}

func (x *GetSyncStateRequest) GetImageIds() []string {
	if x != nil {
		return x.ImageIds
	}
	return nil
}

type GetSyncStateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Images        *ImagesSyncState       `protobuf:"bytes,1,opt,name=images,proto3" json:"images,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSyncStateResponse) Reset() {
	*x = GetSyncStateResponse{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSyncStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSyncStateResponse) ProtoMessage() {}

func (x *GetSyncStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSyncStateResponse.ProtoReflect.Descriptor instead.
func (*GetSyncStateResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{17}
}

func (x *GetSyncStateResponse) GetImages() *ImagesSyncState {
	if x != nil {
		return x.Images
	}
	return nil
}

type ImagesSyncState struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	FullResyncRequired bool                   `protobuf:"varint,1,opt,name=full_resync_required,json=fullResyncRequired,proto3" json:"full_resync_required,omitempty"`
	Images             []*Image               `protobuf:"bytes,2,rep,name=images,proto3" json:"images,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ImagesSyncState) Reset() {
	*x = ImagesSyncState{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImagesSyncState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagesSyncState) ProtoMessage() {}

func (x *ImagesSyncState) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagesSyncState.ProtoReflect.Descriptor instead.
func (*ImagesSyncState) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{18}
}

func (x *ImagesSyncState) GetFullResyncRequired() bool {
	if x != nil {
		return x.FullResyncRequired
	}
	return false
}

func (x *ImagesSyncState) GetImages() []*Image {
	if x != nil {
		return x.Images
	}
	return nil
}

type Image struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Architecture  string                 `protobuf:"bytes,3,opt,name=architecture,proto3" json:"architecture,omitempty"`
	ResourceIds   []string               `protobuf:"bytes,4,rep,name=resource_ids,json=resourceIds,proto3" json:"resource_ids,omitempty"`
	ScanStatus    ImageScanStatus        `protobuf:"varint,5,opt,name=scan_status,json=scanStatus,proto3,enum=runtime.v1.ImageScanStatus" json:"scan_status,omitempty"`
	ScanError     string                 `protobuf:"bytes,6,opt,name=scan_error,json=scanError,proto3" json:"scan_error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Image) Reset() {
	*x = Image{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{19}
}

func (x *Image) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Image) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Image) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *Image) GetResourceIds() []string {
	if x != nil {
		return x.ResourceIds
	}
	return nil
}

func (x *Image) GetScanStatus() ImageScanStatus {
	if x != nil {
		return x.ScanStatus
	}
	return ImageScanStatus_IMAGE_SCAN_STATUS_UNKNOWN
}

func (x *Image) GetScanError() string {
	if x != nil {
		return x.ScanError
	}
	return ""
}

type UpdateSyncStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FullSnapshot  bool                   `protobuf:"varint,1,opt,name=full_snapshot,json=fullSnapshot,proto3" json:"full_snapshot,omitempty"`
	Images        []*Image               `protobuf:"bytes,2,rep,name=images,proto3" json:"images,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSyncStateRequest) Reset() {
	*x = UpdateSyncStateRequest{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSyncStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyncStateRequest) ProtoMessage() {}

func (x *UpdateSyncStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyncStateRequest.ProtoReflect.Descriptor instead.
func (*UpdateSyncStateRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateSyncStateRequest) GetFullSnapshot() bool {
	if x != nil {
		return x.FullSnapshot
	}
	return false
}

func (x *UpdateSyncStateRequest) GetImages() []*Image {
	if x != nil {
		return x.Images
	}
	return nil
}

type UpdateSyncStateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSyncStateResponse) Reset() {
	*x = UpdateSyncStateResponse{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSyncStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSyncStateResponse) ProtoMessage() {}

func (x *UpdateSyncStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSyncStateResponse.ProtoReflect.Descriptor instead.
func (*UpdateSyncStateResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{21}
}

type KubeBenchReport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Controls      []*KubeBenchControls   `protobuf:"bytes,1,rep,name=controls,proto3" json:"controls,omitempty"`
	Node          *KubeBenchNode         `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KubeBenchReport) Reset() {
	*x = KubeBenchReport{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubeBenchReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeBenchReport) ProtoMessage() {}

func (x *KubeBenchReport) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeBenchReport.ProtoReflect.Descriptor instead.
func (*KubeBenchReport) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{22}
}

func (x *KubeBenchReport) GetControls() []*KubeBenchControls {
	if x != nil {
		return x.Controls
	}
	return nil
}

func (x *KubeBenchReport) GetNode() *KubeBenchNode {
	if x != nil {
		return x.Node
	}
	return nil
}

type KubeBenchReportIngestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KubeBenchReportIngestResponse) Reset() {
	*x = KubeBenchReportIngestResponse{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubeBenchReportIngestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeBenchReportIngestResponse) ProtoMessage() {}

func (x *KubeBenchReportIngestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeBenchReportIngestResponse.ProtoReflect.Descriptor instead.
func (*KubeBenchReportIngestResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{23}
}

type KubeBenchNode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeName      string                 `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	ResourceUid   string                 `protobuf:"bytes,2,opt,name=resource_uid,json=resourceUid,proto3" json:"resource_uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KubeBenchNode) Reset() {
	*x = KubeBenchNode{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubeBenchNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeBenchNode) ProtoMessage() {}

func (x *KubeBenchNode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeBenchNode.ProtoReflect.Descriptor instead.
func (*KubeBenchNode) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{24}
}

func (x *KubeBenchNode) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *KubeBenchNode) GetResourceUid() string {
	if x != nil {
		return x.ResourceUid
	}
	return ""
}

type KubeBenchControls struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Groups        []*KubeBenchGroup      `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KubeBenchControls) Reset() {
	*x = KubeBenchControls{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubeBenchControls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeBenchControls) ProtoMessage() {}

func (x *KubeBenchControls) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeBenchControls.ProtoReflect.Descriptor instead.
func (*KubeBenchControls) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{25}
}

func (x *KubeBenchControls) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *KubeBenchControls) GetGroups() []*KubeBenchGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

type KubeBenchGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Checks        []*KubeBenchCheck      `protobuf:"bytes,1,rep,name=checks,proto3" json:"checks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KubeBenchGroup) Reset() {
	*x = KubeBenchGroup{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubeBenchGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeBenchGroup) ProtoMessage() {}

func (x *KubeBenchGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeBenchGroup.ProtoReflect.Descriptor instead.
func (*KubeBenchGroup) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{26}
}

func (x *KubeBenchGroup) GetChecks() []*KubeBenchCheck {
	if x != nil {
		return x.Checks
	}
	return nil
}

type KubeBenchCheck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Text          string                 `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	TestInfo      []string               `protobuf:"bytes,3,rep,name=test_info,json=testInfo,proto3" json:"test_info,omitempty"`
	State         string                 `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KubeBenchCheck) Reset() {
	*x = KubeBenchCheck{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubeBenchCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeBenchCheck) ProtoMessage() {}

func (x *KubeBenchCheck) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeBenchCheck.ProtoReflect.Descriptor instead.
func (*KubeBenchCheck) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{27}
}

func (x *KubeBenchCheck) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KubeBenchCheck) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *KubeBenchCheck) GetTestInfo() []string {
	if x != nil {
		return x.TestInfo
	}
	return nil
}

func (x *KubeBenchCheck) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type KubeLinterReport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Checks        []*KubeLinterCheck     `protobuf:"bytes,1,rep,name=checks,proto3" json:"checks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KubeLinterReport) Reset() {
	*x = KubeLinterReport{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubeLinterReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeLinterReport) ProtoMessage() {}

func (x *KubeLinterReport) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeLinterReport.ProtoReflect.Descriptor instead.
func (*KubeLinterReport) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{28}
}

func (x *KubeLinterReport) GetChecks() []*KubeLinterCheck {
	if x != nil {
		return x.Checks
	}
	return nil
}

type KubeLinterReportIngestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KubeLinterReportIngestResponse) Reset() {
	*x = KubeLinterReportIngestResponse{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubeLinterReportIngestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeLinterReportIngestResponse) ProtoMessage() {}

func (x *KubeLinterReportIngestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeLinterReportIngestResponse.ProtoReflect.Descriptor instead.
func (*KubeLinterReportIngestResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{29}
}

type KubeLinterCheck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ResourceUid   string                 `protobuf:"bytes,1,opt,name=resource_uid,json=resourceUid,proto3" json:"resource_uid,omitempty"`
	Passed        uint64                 `protobuf:"varint,2,opt,name=passed,proto3" json:"passed,omitempty"` // Represented as bitmasks of passed checks.
	Failed        uint64                 `protobuf:"varint,3,opt,name=failed,proto3" json:"failed,omitempty"` // Represented as bitmasks of failed checks.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KubeLinterCheck) Reset() {
	*x = KubeLinterCheck{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubeLinterCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeLinterCheck) ProtoMessage() {}

func (x *KubeLinterCheck) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeLinterCheck.ProtoReflect.Descriptor instead.
func (*KubeLinterCheck) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{30}
}

func (x *KubeLinterCheck) GetResourceUid() string {
	if x != nil {
		return x.ResourceUid
	}
	return ""
}

func (x *KubeLinterCheck) GetPassed() uint64 {
	if x != nil {
		return x.Passed
	}
	return 0
}

func (x *KubeLinterCheck) GetFailed() uint64 {
	if x != nil {
		return x.Failed
	}
	return 0
}

type Process struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Pid             uint32                 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Ppid            uint32                 `protobuf:"varint,2,opt,name=ppid,proto3" json:"ppid,omitempty"`
	StartTime       uint64                 `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	ParentStartTime uint64                 `protobuf:"varint,4,opt,name=parent_start_time,json=parentStartTime,proto3" json:"parent_start_time,omitempty"`
	Args            []string               `protobuf:"bytes,5,rep,name=args,proto3" json:"args,omitempty"`
	Filepath        string                 `protobuf:"bytes,6,opt,name=filepath,proto3" json:"filepath,omitempty"`
	ExitTime        uint64                 `protobuf:"varint,7,opt,name=exit_time,json=exitTime,proto3" json:"exit_time,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Process) Reset() {
	*x = Process{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Process) ProtoMessage() {}

func (x *Process) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Process.ProtoReflect.Descriptor instead.
func (*Process) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{31}
}

func (x *Process) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *Process) GetPpid() uint32 {
	if x != nil {
		return x.Ppid
	}
	return 0
}

func (x *Process) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Process) GetParentStartTime() uint64 {
	if x != nil {
		return x.ParentStartTime
	}
	return 0
}

func (x *Process) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Process) GetFilepath() string {
	if x != nil {
		return x.Filepath
	}
	return ""
}

func (x *Process) GetExitTime() uint64 {
	if x != nil {
		return x.ExitTime
	}
	return 0
}

type ProcessEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     uint64                 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // Stored as unix timestamp in nanoseconds.
	ContainerId   string                 `protobuf:"bytes,2,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Process       *Process               `protobuf:"bytes,3,opt,name=process,proto3" json:"process,omitempty"`
	Action        ProcessAction          `protobuf:"varint,4,opt,name=action,proto3,enum=runtime.v1.ProcessAction" json:"action,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessEvent) Reset() {
	*x = ProcessEvent{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessEvent) ProtoMessage() {}

func (x *ProcessEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessEvent.ProtoReflect.Descriptor instead.
func (*ProcessEvent) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{32}
}

func (x *ProcessEvent) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ProcessEvent) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *ProcessEvent) GetProcess() *Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *ProcessEvent) GetAction() ProcessAction {
	if x != nil {
		return x.Action
	}
	return ProcessAction_PROCESS_ACTION_UNKNOWN
}

type ProcessTreeEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Initial       bool                   `protobuf:"varint,1,opt,name=initial,proto3" json:"initial,omitempty"`
	Events        []*ProcessEvent        `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessTreeEvent) Reset() {
	*x = ProcessTreeEvent{}
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessTreeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTreeEvent) ProtoMessage() {}

func (x *ProcessTreeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_runtime_runtime_agent_api_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTreeEvent.ProtoReflect.Descriptor instead.
func (*ProcessTreeEvent) Descriptor() ([]byte, []int) {
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP(), []int{33}
}

func (x *ProcessTreeEvent) GetInitial() bool {
	if x != nil {
		return x.Initial
	}
	return false
}

func (x *ProcessTreeEvent) GetEvents() []*ProcessEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

var File_api_v1_runtime_runtime_agent_api_proto protoreflect.FileDescriptor

var file_api_v1_runtime_runtime_agent_api_proto_rawDesc = string([]byte{
	0x0a, 0x26, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x1a, 0x23, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x48, 0x0a, 0x15, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x18, 0x0a, 0x16, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd4, 0x02, 0x0a, 0x0d, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x45, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00,
	0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x6f, 0x77,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x66, 0x6c, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x72, 0x65, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x72, 0x65, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x71, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04,
	0x08, 0x02, 0x10, 0x03, 0x22, 0x4d, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x0f, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x81, 0x06, 0x0a, 0x0f, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x69, 0x64, 0x12,
	0x3d, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x64, 0x55, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12,
	0x52, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x61, 0x0a, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xae, 0x06, 0x0a,
	0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x34, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x70, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x70,
	0x69, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x04, 0x65, 0x78, 0x65, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x48, 0x00, 0x52, 0x04, 0x65, 0x78, 0x65, 0x63, 0x12, 0x23, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x4e, 0x53, 0x48, 0x00, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12, 0x26, 0x0a,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x05, 0x74, 0x75, 0x70, 0x6c, 0x65,
	0x12, 0x3a, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x03,
	0x61, 0x6e, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6e,
	0x79, 0x12, 0x4d, 0x0a, 0x10, 0x73, 0x74, 0x64, 0x69, 0x6f, 0x5f, 0x76, 0x69, 0x61, 0x5f, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x64, 0x69, 0x6f, 0x56, 0x69,
	0x61, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x0e, 0x73, 0x74, 0x64, 0x69, 0x6f, 0x56, 0x69, 0x61, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x27, 0x0a, 0x03, 0x73, 0x73, 0x68, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x53, 0x48, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x03, 0x73, 0x73, 0x68, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x6b, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x6b, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x45, 0x78, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x45, 0x78, 0x69, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x15, 0x0a,
	0x13, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf4, 0x04, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x64, 0x55, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x31,
	0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x08, 0x63, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x34, 0x0a,
	0x0a, 0x70, 0x69, 0x64, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x69, 0x64, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x70, 0x69, 0x64, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x69, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x4f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x07, 0x69, 0x6f, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x10, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22,
	0x3e, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x73, 0x22,
	0xc7, 0x01, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x70,
	0x75, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x75, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x08, 0x63, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3a, 0x0a,
	0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x69, 0x6f, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x4f, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x07, 0x69, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xf6, 0x02, 0x0a, 0x0d, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x6f, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69,
	0x6c, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x32, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x73, 0x22, 0x4b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x22, 0x6e, 0x0a, 0x0f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x63, 0x61, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53,
	0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x68, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79,
	0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0x19,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7b, 0x0a, 0x0f, 0x4b, 0x75, 0x62,
	0x65, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65,
	0x42, 0x65, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x4b, 0x75, 0x62, 0x65, 0x42, 0x65,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x0a, 0x0d, 0x4b, 0x75, 0x62, 0x65, 0x42,
	0x65, 0x6e, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x69, 0x64, 0x22, 0x61, 0x0a, 0x11, 0x4b, 0x75, 0x62, 0x65,
	0x42, 0x65, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x44, 0x0a, 0x0e, 0x4b,
	0x75, 0x62, 0x65, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x32, 0x0a,
	0x06, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x42,
	0x65, 0x6e, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x22, 0x67, 0x0a, 0x0e, 0x4b, 0x75, 0x62, 0x65, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x47, 0x0a, 0x10, 0x4b, 0x75,
	0x62, 0x65, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x33,
	0x0a, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65,
	0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x06, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x22, 0x20, 0x0a, 0x1e, 0x4b, 0x75, 0x62, 0x65, 0x4c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x64, 0x0a, 0x0f, 0x4b, 0x75, 0x62, 0x65, 0x4c, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61, 0x73,
	0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x70, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x65, 0x78, 0x69,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5e, 0x0a, 0x10, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x72, 0x65, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2a, 0xf0, 0x02, 0x0a, 0x09, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x58,
	0x45, 0x43, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x4e,
	0x53, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x43, 0x50,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x43, 0x50, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x10, 0x05, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4f, 0x4f, 0x4d, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45,
	0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x49, 0x47, 0x4e,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x54, 0x59, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x44, 0x49, 0x4f, 0x5f, 0x56, 0x49, 0x41, 0x5f,
	0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x53, 0x48, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4b, 0x10, 0x0d, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x45, 0x58, 0x49, 0x54, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x09,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0xe7, 0x07, 0x2a, 0xcf, 0x01, 0x0a,
	0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a,
	0x15, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x57, 0x4f, 0x52, 0x4b,
	0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f,
	0x41, 0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x5f,
	0x53, 0x45, 0x54, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41,
	0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x5f,
	0x53, 0x45, 0x54, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41,
	0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15,
	0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x52,
	0x4f, 0x4e, 0x4a, 0x4f, 0x42, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x4f, 0x52, 0x4b, 0x4c,
	0x4f, 0x41, 0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x4f, 0x44, 0x10, 0x06, 0x2a, 0x90,
	0x01, 0x0a, 0x0f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x43, 0x41, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12,
	0x20, 0x0a, 0x1c, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x03, 0x2a, 0x76, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x58, 0x45, 0x43, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x4b, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x10, 0x03, 0x32, 0xfc, 0x05, 0x0a, 0x17, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x41, 0x50, 0x49, 0x12, 0x5f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x73, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a,
	0x1f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x28, 0x01, 0x12, 0x59, 0x0a, 0x0e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x21, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x53, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79,
	0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5b, 0x0a, 0x13, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x27, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x61, 0x0a, 0x15, 0x4b, 0x75, 0x62, 0x65, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x29, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x64, 0x0a, 0x16, 0x4b, 0x75, 0x62, 0x65, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x4c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x2a, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x4c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x61, 0x73, 0x74, 0x61, 0x69, 0x2f, 0x6b, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_api_v1_runtime_runtime_agent_api_proto_rawDescOnce sync.Once
	file_api_v1_runtime_runtime_agent_api_proto_rawDescData []byte
)

func file_api_v1_runtime_runtime_agent_api_proto_rawDescGZIP() []byte {
	file_api_v1_runtime_runtime_agent_api_proto_rawDescOnce.Do(func() {
		file_api_v1_runtime_runtime_agent_api_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_v1_runtime_runtime_agent_api_proto_rawDesc), len(file_api_v1_runtime_runtime_agent_api_proto_rawDesc)))
	})
	return file_api_v1_runtime_runtime_agent_api_proto_rawDescData
}

var file_api_v1_runtime_runtime_agent_api_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_api_v1_runtime_runtime_agent_api_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_api_v1_runtime_runtime_agent_api_proto_goTypes = []any{
	(EventType)(0),                         // 0: runtime.v1.EventType
	(WorkloadKind)(0),                      // 1: runtime.v1.WorkloadKind
	(ImageScanStatus)(0),                   // 2: runtime.v1.ImageScanStatus
	(ProcessAction)(0),                     // 3: runtime.v1.ProcessAction
	(*WriteDataBatchRequest)(nil),          // 4: runtime.v1.WriteDataBatchRequest
	(*WriteDataBatchResponse)(nil),         // 5: runtime.v1.WriteDataBatchResponse
	(*DataBatchItem)(nil),                  // 6: runtime.v1.DataBatchItem
	(*GetConfigurationRequest)(nil),        // 7: runtime.v1.GetConfigurationRequest
	(*GetConfigurationResponse)(nil),       // 8: runtime.v1.GetConfigurationResponse
	(*Configuration)(nil),                  // 9: runtime.v1.Configuration
	(*ProcessIdentity)(nil),                // 10: runtime.v1.ProcessIdentity
	(*ContainerEvents)(nil),                // 11: runtime.v1.ContainerEvents
	(*ContainerEvent)(nil),                 // 12: runtime.v1.ContainerEvent
	(*WriteStreamResponse)(nil),            // 13: runtime.v1.WriteStreamResponse
	(*SendLogsResponse)(nil),               // 14: runtime.v1.SendLogsResponse
	(*ContainerStats)(nil),                 // 15: runtime.v1.ContainerStats
	(*FilesAccessStats)(nil),               // 16: runtime.v1.FilesAccessStats
	(*NodeStats)(nil),                      // 17: runtime.v1.NodeStats
	(*ImageMetadata)(nil),                  // 18: runtime.v1.ImageMetadata
	(*ImageMetadataIngestResponse)(nil),    // 19: runtime.v1.ImageMetadataIngestResponse
	(*GetSyncStateRequest)(nil),            // 20: runtime.v1.GetSyncStateRequest
	(*GetSyncStateResponse)(nil),           // 21: runtime.v1.GetSyncStateResponse
	(*ImagesSyncState)(nil),                // 22: runtime.v1.ImagesSyncState
	(*Image)(nil),                          // 23: runtime.v1.Image
	(*UpdateSyncStateRequest)(nil),         // 24: runtime.v1.UpdateSyncStateRequest
	(*UpdateSyncStateResponse)(nil),        // 25: runtime.v1.UpdateSyncStateResponse
	(*KubeBenchReport)(nil),                // 26: runtime.v1.KubeBenchReport
	(*KubeBenchReportIngestResponse)(nil),  // 27: runtime.v1.KubeBenchReportIngestResponse
	(*KubeBenchNode)(nil),                  // 28: runtime.v1.KubeBenchNode
	(*KubeBenchControls)(nil),              // 29: runtime.v1.KubeBenchControls
	(*KubeBenchGroup)(nil),                 // 30: runtime.v1.KubeBenchGroup
	(*KubeBenchCheck)(nil),                 // 31: runtime.v1.KubeBenchCheck
	(*KubeLinterReport)(nil),               // 32: runtime.v1.KubeLinterReport
	(*KubeLinterReportIngestResponse)(nil), // 33: runtime.v1.KubeLinterReportIngestResponse
	(*KubeLinterCheck)(nil),                // 34: runtime.v1.KubeLinterCheck
	(*Process)(nil),                        // 35: runtime.v1.Process
	(*ProcessEvent)(nil),                   // 36: runtime.v1.ProcessEvent
	(*ProcessTreeEvent)(nil),               // 37: runtime.v1.ProcessTreeEvent
	nil,                                    // 38: runtime.v1.ContainerEvents.ObjectLabelsEntry
	nil,                                    // 39: runtime.v1.ContainerEvents.ObjectAnnotationsEntry
	(*Netflow)(nil),                        // 40: runtime.v1.Netflow
	(*Exec)(nil),                           // 41: runtime.v1.Exec
	(*DNS)(nil),                            // 42: runtime.v1.DNS
	(*File)(nil),                           // 43: runtime.v1.File
	(*Tuple)(nil),                          // 44: runtime.v1.Tuple
	(*SignatureEvent)(nil),                 // 45: runtime.v1.SignatureEvent
	(*Any)(nil),                            // 46: runtime.v1.Any
	(*StdioViaSocketFinding)(nil),          // 47: runtime.v1.StdioViaSocketFinding
	(*SSHData)(nil),                        // 48: runtime.v1.SSHData
	(*ProcessFork)(nil),                    // 49: runtime.v1.ProcessFork
	(*ProcessExit)(nil),                    // 50: runtime.v1.ProcessExit
	(*CpuStats)(nil),                       // 51: runtime.v1.CpuStats
	(*MemoryStats)(nil),                    // 52: runtime.v1.MemoryStats
	(*PidsStats)(nil),                      // 53: runtime.v1.PidsStats
	(*IOStats)(nil),                        // 54: runtime.v1.IOStats
	(*timestamppb.Timestamp)(nil),          // 55: google.protobuf.Timestamp
	(*LogEvent)(nil),                       // 56: runtime.v1.LogEvent
}
var file_api_v1_runtime_runtime_agent_api_proto_depIdxs = []int32{
	6,  // 0: runtime.v1.WriteDataBatchRequest.items:type_name -> runtime.v1.DataBatchItem
	15, // 1: runtime.v1.DataBatchItem.container_stats:type_name -> runtime.v1.ContainerStats
	17, // 2: runtime.v1.DataBatchItem.node_stats:type_name -> runtime.v1.NodeStats
	11, // 3: runtime.v1.DataBatchItem.container_events:type_name -> runtime.v1.ContainerEvents
	40, // 4: runtime.v1.DataBatchItem.netflow:type_name -> runtime.v1.Netflow
	37, // 5: runtime.v1.DataBatchItem.process_tree:type_name -> runtime.v1.ProcessTreeEvent
	9,  // 6: runtime.v1.GetConfigurationResponse.config:type_name -> runtime.v1.Configuration
	1,  // 7: runtime.v1.ContainerEvents.workload_kind:type_name -> runtime.v1.WorkloadKind
	38, // 8: runtime.v1.ContainerEvents.object_labels:type_name -> runtime.v1.ContainerEvents.ObjectLabelsEntry
	39, // 9: runtime.v1.ContainerEvents.object_annotations:type_name -> runtime.v1.ContainerEvents.ObjectAnnotationsEntry
	12, // 10: runtime.v1.ContainerEvents.items:type_name -> runtime.v1.ContainerEvent
	0,  // 11: runtime.v1.ContainerEvent.event_type:type_name -> runtime.v1.EventType
	41, // 12: runtime.v1.ContainerEvent.exec:type_name -> runtime.v1.Exec
	42, // 13: runtime.v1.ContainerEvent.dns:type_name -> runtime.v1.DNS
	43, // 14: runtime.v1.ContainerEvent.file:type_name -> runtime.v1.File
	44, // 15: runtime.v1.ContainerEvent.tuple:type_name -> runtime.v1.Tuple
	45, // 16: runtime.v1.ContainerEvent.signature:type_name -> runtime.v1.SignatureEvent
	46, // 17: runtime.v1.ContainerEvent.any:type_name -> runtime.v1.Any
	47, // 18: runtime.v1.ContainerEvent.stdio_via_socket:type_name -> runtime.v1.StdioViaSocketFinding
	48, // 19: runtime.v1.ContainerEvent.ssh:type_name -> runtime.v1.SSHData
	49, // 20: runtime.v1.ContainerEvent.process_fork:type_name -> runtime.v1.ProcessFork
	50, // 21: runtime.v1.ContainerEvent.process_exit:type_name -> runtime.v1.ProcessExit
	51, // 22: runtime.v1.ContainerStats.cpu_stats:type_name -> runtime.v1.CpuStats
	52, // 23: runtime.v1.ContainerStats.memory_stats:type_name -> runtime.v1.MemoryStats
	53, // 24: runtime.v1.ContainerStats.pids_stats:type_name -> runtime.v1.PidsStats
	54, // 25: runtime.v1.ContainerStats.io_stats:type_name -> runtime.v1.IOStats
	16, // 26: runtime.v1.ContainerStats.files_access_stats:type_name -> runtime.v1.FilesAccessStats
	51, // 27: runtime.v1.NodeStats.cpu_stats:type_name -> runtime.v1.CpuStats
	52, // 28: runtime.v1.NodeStats.memory_stats:type_name -> runtime.v1.MemoryStats
	54, // 29: runtime.v1.NodeStats.io_stats:type_name -> runtime.v1.IOStats
	55, // 30: runtime.v1.ImageMetadata.created_at:type_name -> google.protobuf.Timestamp
	22, // 31: runtime.v1.GetSyncStateResponse.images:type_name -> runtime.v1.ImagesSyncState
	23, // 32: runtime.v1.ImagesSyncState.images:type_name -> runtime.v1.Image
	2,  // 33: runtime.v1.Image.scan_status:type_name -> runtime.v1.ImageScanStatus
	23, // 34: runtime.v1.UpdateSyncStateRequest.images:type_name -> runtime.v1.Image
	29, // 35: runtime.v1.KubeBenchReport.controls:type_name -> runtime.v1.KubeBenchControls
	28, // 36: runtime.v1.KubeBenchReport.node:type_name -> runtime.v1.KubeBenchNode
	30, // 37: runtime.v1.KubeBenchControls.groups:type_name -> runtime.v1.KubeBenchGroup
	31, // 38: runtime.v1.KubeBenchGroup.checks:type_name -> runtime.v1.KubeBenchCheck
	34, // 39: runtime.v1.KubeLinterReport.checks:type_name -> runtime.v1.KubeLinterCheck
	35, // 40: runtime.v1.ProcessEvent.process:type_name -> runtime.v1.Process
	3,  // 41: runtime.v1.ProcessEvent.action:type_name -> runtime.v1.ProcessAction
	36, // 42: runtime.v1.ProcessTreeEvent.events:type_name -> runtime.v1.ProcessEvent
	7,  // 43: runtime.v1.RuntimeSecurityAgentAPI.GetConfiguration:input_type -> runtime.v1.GetConfigurationRequest
	56, // 44: runtime.v1.RuntimeSecurityAgentAPI.LogsWriteStream:input_type -> runtime.v1.LogEvent
	4,  // 45: runtime.v1.RuntimeSecurityAgentAPI.WriteDataBatch:input_type -> runtime.v1.WriteDataBatchRequest
	20, // 46: runtime.v1.RuntimeSecurityAgentAPI.GetSyncState:input_type -> runtime.v1.GetSyncStateRequest
	24, // 47: runtime.v1.RuntimeSecurityAgentAPI.UpdateSyncState:input_type -> runtime.v1.UpdateSyncStateRequest
	18, // 48: runtime.v1.RuntimeSecurityAgentAPI.ImageMetadataIngest:input_type -> runtime.v1.ImageMetadata
	26, // 49: runtime.v1.RuntimeSecurityAgentAPI.KubeBenchReportIngest:input_type -> runtime.v1.KubeBenchReport
	32, // 50: runtime.v1.RuntimeSecurityAgentAPI.KubeLinterReportIngest:input_type -> runtime.v1.KubeLinterReport
	8,  // 51: runtime.v1.RuntimeSecurityAgentAPI.GetConfiguration:output_type -> runtime.v1.GetConfigurationResponse
	13, // 52: runtime.v1.RuntimeSecurityAgentAPI.LogsWriteStream:output_type -> runtime.v1.WriteStreamResponse
	5,  // 53: runtime.v1.RuntimeSecurityAgentAPI.WriteDataBatch:output_type -> runtime.v1.WriteDataBatchResponse
	21, // 54: runtime.v1.RuntimeSecurityAgentAPI.GetSyncState:output_type -> runtime.v1.GetSyncStateResponse
	25, // 55: runtime.v1.RuntimeSecurityAgentAPI.UpdateSyncState:output_type -> runtime.v1.UpdateSyncStateResponse
	19, // 56: runtime.v1.RuntimeSecurityAgentAPI.ImageMetadataIngest:output_type -> runtime.v1.ImageMetadataIngestResponse
	27, // 57: runtime.v1.RuntimeSecurityAgentAPI.KubeBenchReportIngest:output_type -> runtime.v1.KubeBenchReportIngestResponse
	33, // 58: runtime.v1.RuntimeSecurityAgentAPI.KubeLinterReportIngest:output_type -> runtime.v1.KubeLinterReportIngestResponse
	51, // [51:59] is the sub-list for method output_type
	43, // [43:51] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_api_v1_runtime_runtime_agent_api_proto_init() }
func file_api_v1_runtime_runtime_agent_api_proto_init() {
	if File_api_v1_runtime_runtime_agent_api_proto != nil {
		return
	}
	file_api_v1_runtime_common_proto_init()
	file_api_v1_runtime_runtime_agent_api_proto_msgTypes[2].OneofWrappers = []any{
		(*DataBatchItem_ContainerStats)(nil),
		(*DataBatchItem_NodeStats)(nil),
		(*DataBatchItem_ContainerEvents)(nil),
		(*DataBatchItem_Netflow)(nil),
		(*DataBatchItem_ProcessTree)(nil),
	}
	file_api_v1_runtime_runtime_agent_api_proto_msgTypes[3].OneofWrappers = []any{
		(*GetConfigurationRequest_Controller)(nil),
		(*GetConfigurationRequest_Agent)(nil),
	}
	file_api_v1_runtime_runtime_agent_api_proto_msgTypes[8].OneofWrappers = []any{
		(*ContainerEvent_Exec)(nil),
		(*ContainerEvent_Dns)(nil),
		(*ContainerEvent_File)(nil),
		(*ContainerEvent_Tuple)(nil),
		(*ContainerEvent_Signature)(nil),
		(*ContainerEvent_Any)(nil),
		(*ContainerEvent_StdioViaSocket)(nil),
		(*ContainerEvent_Ssh)(nil),
		(*ContainerEvent_ProcessFork)(nil),
		(*ContainerEvent_ProcessExit)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_v1_runtime_runtime_agent_api_proto_rawDesc), len(file_api_v1_runtime_runtime_agent_api_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1_runtime_runtime_agent_api_proto_goTypes,
		DependencyIndexes: file_api_v1_runtime_runtime_agent_api_proto_depIdxs,
		EnumInfos:         file_api_v1_runtime_runtime_agent_api_proto_enumTypes,
		MessageInfos:      file_api_v1_runtime_runtime_agent_api_proto_msgTypes,
	}.Build()
	File_api_v1_runtime_runtime_agent_api_proto = out.File
	file_api_v1_runtime_runtime_agent_api_proto_goTypes = nil
	file_api_v1_runtime_runtime_agent_api_proto_depIdxs = nil
}
