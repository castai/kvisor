syntax = "proto3";

package runtime.v1;

option go_package = "github.com/castai/kvisord/api/runtime/v1";

message Any {
  uint32 event_id = 1;
  uint32 syscall = 2;
  bytes data = 3;
}

message Exec {
  string path = 1;
  repeated string args = 2;
  bytes hash_sha256 = 3;
  uint32 flags = 4;
}

message File {
  string path = 1;
}

message Tuple {
  bytes src_ip = 1;
  bytes dst_ip = 2;
  uint32 src_port = 3;
  uint32 dst_port = 4;
  string dns_question = 5;
}

enum FlowDirection {
  FLOW_UNKNOWN = 0;
  FLOW_INGRESS = 1;
  FLOW_EGRESS = 2;
}

message DNS {
  string DNSQuestionDomain = 1;
  repeated DNSAnswers answers = 2;
  FlowDirection flow_direction = 3;
  Tuple tuple = 4;
}

message DNSAnswers {
  uint32 type = 1;
  uint32 class = 2;
  uint32 ttl = 3;
  string name = 4;
  bytes ip = 5;
  string cname = 6;
}

message LogEvent {
  int32 level = 1;
  string msg = 2;
}

message SignatureEvent {
  SignatureMetadata metadata = 1;
  SignatureFinding finding = 2;
}

enum SignatureEventID {
  SIGNATURE_UNKNOWN = 0;
  SIGNATURE_STDIO_VIA_SOCKET = 1;
  SIGNATURE_TTY_DETECTED = 2;
  SIGNATURE_SOCKS5_DETECTED = 3;
}

message SignatureMetadata {
  SignatureEventID id = 1;
  string version = 2;
}

message SignatureFinding {
  oneof data {
    StdioViaSocketFinding stdio_via_socket = 1;
    TtyDetectedFinding tty_detected = 2;
    SOCKS5DetectedFinding socks5_detected = 3;
  }
}

message StdioViaSocketFinding {
  bytes ip = 1;
  uint32 port = 2;
  int32 socketfd = 3;
}

message TtyDetectedFinding {
  string path = 1;
}

enum SOCKS5Role {
  SOCKS5_ROLE_UNKNOWN = 0;
  SOCKS5_ROLE_CLIENT = 1;
  SOCKS5_ROLE_SERVER = 2;
}

enum SOCKS5AddressType {
  SOCKS5_ADDRESS_TYPE_UNKNOWN = 0;
  SOCKS5_ADDRESS_TYPE_IPv4 = 1;
  SOCKS5_ADDRESS_TYPE_DOMAIN_NAME = 3;
  SOCKS5_ADDRESS_TYPE_IPv6 = 4;
}

message SOCKS5DetectedFinding {
  SOCKS5Role role = 1;
  FlowDirection flow_direction = 2;
  uint32 cmd_or_reply = 3;
  SOCKS5AddressType address_type = 4;
  bytes address = 5;
  uint32 port = 6;
}

message SSHData {
  FlowDirection flow_direction = 1;
  string version = 2;
  string comments = 3;
  Tuple tuple = 4;
}

enum NetflowProtocol {
  NETFLOW_PROTOCOL_UNKNOWN = 0;
  NETFLOW_PROTOCOL_TCP = 1;
  NETFLOW_PROTOCOL_UDP = 2;
}

message Netflow {
  uint64 timestamp = 1; // Stored as unix timestamp in nanoseconds.
  string process_name = 2;
  string namespace = 3;
  string pod_name = 4;
  string container_name = 5;
  string workload_name = 6;
  string workload_kind = 7;
  string zone = 8;
  string node_name = 13;
  bytes addr = 9;
  uint32 port = 10;
  NetflowProtocol protocol = 11;
  repeated NetflowDestination destinations = 12;
}

message NetflowDestination {
  string namespace = 1;
  string pod_name = 2;
  string workload_name = 3;
  string workload_kind = 4;
  string zone = 5;
  string dns_question = 6;
  string node_name = 14;
  bytes addr = 8;
  uint32 port = 9;
  uint64 tx_bytes = 10;
  uint64 rx_bytes = 11;
  uint64 tx_packets = 12;
  uint64 rx_packets = 13;
}

message PSIData {
  uint64 total = 1;
}

message PSIStats {
  PSIData some = 1;
  PSIData full = 2;
}

message CpuStats {
  // Total CPU time consumed.
  // Units: nanoseconds.
  uint64 total_usage = 1;
  // Time spent by tasks of the cgroup in kernel mode.
  // Units: nanoseconds.
  uint64 usage_in_kernelmode = 2;
  // Time spent by tasks of the cgroup in user mode.
  // Units: nanoseconds.
  uint64 usage_in_usermode = 3;
  // Number of periods when the container hit its throttling limit.
  uint64 throttled_periods = 4;
  // Aggregate time the container was throttled for in nanoseconds.
  uint64 throttled_time = 5;

  PSIStats psi = 6;
}

message MemoryData {
  uint64 usage = 1;
  uint64 limit = 2;
}

message MemoryStats {
  uint64 cache = 1;
  MemoryData usage = 2;
  MemoryData swap_only_usage = 4;
  PSIStats psi = 8;
}

message PidsStats {
  // number of pids in the cgroup
  uint64 current = 1;
  // active pids hard limit
  uint64 limit = 2;
}

message IOStats {
  PSIStats psi = 1;
}
