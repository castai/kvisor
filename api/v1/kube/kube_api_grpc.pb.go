// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: api/v1/kube/kube_api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KubeAPI_GetClusterInfo_FullMethodName = "/kube.v1.KubeAPI/GetClusterInfo"
	KubeAPI_GetIPInfo_FullMethodName      = "/kube.v1.KubeAPI/GetIPInfo"
	KubeAPI_GetPod_FullMethodName         = "/kube.v1.KubeAPI/GetPod"
)

// KubeAPIClient is the client API for KubeAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KubeAPIClient interface {
	GetClusterInfo(ctx context.Context, in *GetClusterInfoRequest, opts ...grpc.CallOption) (*GetClusterInfoResponse, error)
	GetIPInfo(ctx context.Context, in *GetIPInfoRequest, opts ...grpc.CallOption) (*GetIPInfoResponse, error)
	GetPod(ctx context.Context, in *GetPodRequest, opts ...grpc.CallOption) (*GetPodResponse, error)
}

type kubeAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewKubeAPIClient(cc grpc.ClientConnInterface) KubeAPIClient {
	return &kubeAPIClient{cc}
}

func (c *kubeAPIClient) GetClusterInfo(ctx context.Context, in *GetClusterInfoRequest, opts ...grpc.CallOption) (*GetClusterInfoResponse, error) {
	out := new(GetClusterInfoResponse)
	err := c.cc.Invoke(ctx, KubeAPI_GetClusterInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeAPIClient) GetIPInfo(ctx context.Context, in *GetIPInfoRequest, opts ...grpc.CallOption) (*GetIPInfoResponse, error) {
	out := new(GetIPInfoResponse)
	err := c.cc.Invoke(ctx, KubeAPI_GetIPInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeAPIClient) GetPod(ctx context.Context, in *GetPodRequest, opts ...grpc.CallOption) (*GetPodResponse, error) {
	out := new(GetPodResponse)
	err := c.cc.Invoke(ctx, KubeAPI_GetPod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KubeAPIServer is the server API for KubeAPI service.
// All implementations should embed UnimplementedKubeAPIServer
// for forward compatibility
type KubeAPIServer interface {
	GetClusterInfo(context.Context, *GetClusterInfoRequest) (*GetClusterInfoResponse, error)
	GetIPInfo(context.Context, *GetIPInfoRequest) (*GetIPInfoResponse, error)
	GetPod(context.Context, *GetPodRequest) (*GetPodResponse, error)
}

// UnimplementedKubeAPIServer should be embedded to have forward compatible implementations.
type UnimplementedKubeAPIServer struct {
}

func (UnimplementedKubeAPIServer) GetClusterInfo(context.Context, *GetClusterInfoRequest) (*GetClusterInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterInfo not implemented")
}
func (UnimplementedKubeAPIServer) GetIPInfo(context.Context, *GetIPInfoRequest) (*GetIPInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIPInfo not implemented")
}
func (UnimplementedKubeAPIServer) GetPod(context.Context, *GetPodRequest) (*GetPodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPod not implemented")
}

// UnsafeKubeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubeAPIServer will
// result in compilation errors.
type UnsafeKubeAPIServer interface {
	mustEmbedUnimplementedKubeAPIServer()
}

func RegisterKubeAPIServer(s grpc.ServiceRegistrar, srv KubeAPIServer) {
	s.RegisterService(&KubeAPI_ServiceDesc, srv)
}

func _KubeAPI_GetClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeAPIServer).GetClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeAPI_GetClusterInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeAPIServer).GetClusterInfo(ctx, req.(*GetClusterInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeAPI_GetIPInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIPInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeAPIServer).GetIPInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeAPI_GetIPInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeAPIServer).GetIPInfo(ctx, req.(*GetIPInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeAPI_GetPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeAPIServer).GetPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubeAPI_GetPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeAPIServer).GetPod(ctx, req.(*GetPodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KubeAPI_ServiceDesc is the grpc.ServiceDesc for KubeAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KubeAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kube.v1.KubeAPI",
	HandlerType: (*KubeAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClusterInfo",
			Handler:    _KubeAPI_GetClusterInfo_Handler,
		},
		{
			MethodName: "GetIPInfo",
			Handler:    _KubeAPI_GetIPInfo_Handler,
		},
		{
			MethodName: "GetPod",
			Handler:    _KubeAPI_GetPod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/kube/kube_api.proto",
}
